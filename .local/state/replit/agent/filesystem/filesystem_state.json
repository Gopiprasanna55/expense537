{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack expense tracking application built with React frontend and Express.js backend. The application allows users to manage expenses, budgets, and categories with features like receipt uploads, analytics, and data visualization. It uses TypeScript throughout for type safety and includes comprehensive CRUD operations for expense management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for build tooling\n- **UI Library**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for client-side routing (lightweight alternative to React Router)\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **File Uploads**: Uppy with AWS S3 integration for receipt uploads\n- **Charts**: Recharts for data visualization and analytics\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: Basic session-based approach (expandable)\n- **File Storage**: Google Cloud Storage with ACL-based access control\n- **API Design**: RESTful API with structured error handling and logging middleware\n- **Validation**: Shared Zod schemas between frontend and backend for consistent validation\n\n## Data Storage\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Schema Design**: Three main entities - categories, budgets, and expenses with proper foreign key relationships\n- **Connection**: Neon Database serverless PostgreSQL instance\n- **Migrations**: Drizzle Kit for schema migrations and database management\n\n## File Management\n- **Storage Provider**: Google Cloud Storage for receipt attachments\n- **Access Control**: Custom ACL system with object-level permissions\n- **Upload Strategy**: Direct-to-cloud uploads with presigned URLs\n- **File Organization**: Structured object paths with metadata support\n\n## Development Architecture\n- **Build System**: Vite for fast development and optimized production builds\n- **Code Organization**: Monorepo structure with shared types and schemas\n- **Styling**: Tailwind CSS with custom design system variables\n- **Type Safety**: End-to-end TypeScript with shared validation schemas\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL adapter\n\n## Cloud Storage\n- **Google Cloud Storage**: Object storage for receipt files and attachments\n- **Replit Sidecar**: Authentication service for GCS access in Replit environment\n\n## UI Framework Dependencies\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Shadcn/ui**: Pre-built component library with consistent design system\n\n## Development Tools\n- **Vite**: Build tool with hot module replacement and optimization\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation and schema definition\n- **Recharts**: Chart library for data visualization\n\n## File Upload Infrastructure\n- **Uppy**: File upload library with progress tracking and error handling\n- **AWS S3 Uppy Plugin**: Direct-to-S3 upload capabilities (adaptable to other providers)\n\n## Deployment Considerations\n- The application is structured for deployment on Replit with specific integrations\n- Uses environment variables for database connections and cloud service credentials\n- Supports both development and production build configurations","size_bytes":3806},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Fira Code\", \"Consolas\", \"monospace\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      spacing: {\n        '18': '4.5rem',\n        '22': '5.5rem',\n      },\n      maxWidth: {\n        '8xl': '88rem',\n        '9xl': '96rem',\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"pulse-subtle\": \"pulse-subtle 2s ease-in-out infinite\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n          },\n          to: {\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          from: {\n            transform: \"translateY(20px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-subtle\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.7\",\n          },\n        },\n      },\n      boxShadow: {\n        'card': '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n        'card-hover': '0 4px 12px 0 rgba(0, 0, 0, 0.1)',\n        'sidebar': '2px 0 8px rgba(0, 0, 0, 0.1)',\n      },\n      backgroundImage: {\n        'gradient-primary': 'linear-gradient(90deg, hsl(var(--secondary)) 0%, hsl(var(--primary)) 100%)',\n        'gradient-card': 'linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--accent)) 100%)',\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n  ],\n} satisfies Config;\n","size_bytes":4198},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Configure session middleware with PostgreSQL store\nconst PgSession = connectPgSimple(session);\napp.use(session({\n  store: new PgSession({\n    conString: process.env.DATABASE_URL,\n    tableName: 'session', // Store sessions in a dedicated table\n    createTableIfMissing: true\n  }),\n  secret: process.env.SESSION_SECRET || 'fallback-secret-for-development',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production', // Use secure cookies in production\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2731},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCategorySchema, insertExpenseWalletSchema, updateExpenseWalletSchema, insertExpenseSchema, updateExpenseSchema } from \"@shared/schema\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { importExpensesFromExcel } from \"./excelImport\";\nimport { authProvider } from \"./authProvider\";\nimport authRoutes from \"./authRoutes\";\nimport userRoutes from \"./userRoutes\";\nimport path from \"path\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.use(\"/auth\", authRoutes);\n  \n  // User management routes (admin only)\n  app.use(\"/api/users\", userRoutes);\n  \n  // Apply authentication middleware to all API routes except auth\n  app.use(\"/api\", authProvider.requireAuth());\n  \n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(400).json({ error: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(id, categoryData);\n      \n      if (!category) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n      \n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(400).json({ error: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteCategory(id);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ error: \"Failed to delete category\" });\n    }\n  });\n\n  // Expense Wallet routes\n  app.get(\"/api/expense-wallets\", async (req, res) => {\n    try {\n      const expenseWallets = await storage.getExpenseWallets();\n      res.json(expenseWallets);\n    } catch (error) {\n      console.error(\"Error fetching expense wallets:\", error);\n      res.status(500).json({ error: \"Failed to fetch expense wallets\" });\n    }\n  });\n\n  app.get(\"/api/current-expense-wallet\", async (req, res) => {\n    try {\n      const currentWallet = await storage.getCurrentExpenseWallet();\n      if (!currentWallet) {\n        return res.status(404).json({ error: \"No expense wallet found\" });\n      }\n      res.json(currentWallet);\n    } catch (error) {\n      console.error(\"Error fetching current expense wallet:\", error);\n      res.status(500).json({ error: \"Failed to fetch current expense wallet\" });\n    }\n  });\n\n\n  app.post(\"/api/expense-wallets\", async (req, res) => {\n    try {\n      const walletData = insertExpenseWalletSchema.parse(req.body);\n      const expenseWallet = await storage.createExpenseWallet(walletData);\n      res.status(201).json(expenseWallet);\n    } catch (error) {\n      console.error(\"Error creating expense wallet:\", error);\n      res.status(400).json({ error: \"Failed to create expense wallet\" });\n    }\n  });\n\n  app.put(\"/api/expense-wallets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const walletData = insertExpenseWalletSchema.partial().parse(req.body);\n      const expenseWallet = await storage.updateExpenseWallet(id, walletData);\n      \n      if (!expenseWallet) {\n        return res.status(404).json({ error: \"Expense wallet not found\" });\n      }\n      \n      res.json(expenseWallet);\n    } catch (error) {\n      console.error(\"Error updating expense wallet:\", error);\n      res.status(400).json({ error: \"Failed to update expense wallet\" });\n    }\n  });\n\n  // Expense routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const { \n        search, \n        categoryId, \n        startDate, \n        endDate, \n        minAmount, \n        maxAmount,\n        sortBy = 'date',\n        sortOrder = 'desc',\n        limit = '50',\n        offset = '0'\n      } = req.query;\n\n      const filters = {\n        search: search as string,\n        categoryId: categoryId as string,\n        startDate: startDate as string,\n        endDate: endDate as string,\n        minAmount: minAmount ? parseFloat(minAmount as string) : undefined,\n        maxAmount: maxAmount ? parseFloat(maxAmount as string) : undefined,\n      };\n\n      // Remove undefined values\n      Object.keys(filters).forEach(key => {\n        if (filters[key as keyof typeof filters] === undefined || filters[key as keyof typeof filters] === '') {\n          delete filters[key as keyof typeof filters];\n        }\n      });\n\n      const expenses = await storage.getExpenses(\n        Object.keys(filters).length > 0 ? filters : undefined,\n        sortBy as any,\n        sortOrder as any,\n        parseInt(limit as string),\n        parseInt(offset as string)\n      );\n\n      const totalCount = await storage.getExpensesCount(\n        Object.keys(filters).length > 0 ? filters : undefined\n      );\n\n      res.json({\n        expenses,\n        totalCount,\n        hasMore: parseInt(offset as string) + expenses.length < totalCount,\n      });\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ error: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.get(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const expense = await storage.getExpenseById(id);\n      \n      if (!expense) {\n        return res.status(404).json({ error: \"Expense not found\" });\n      }\n      \n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error fetching expense:\", error);\n      res.status(500).json({ error: \"Failed to fetch expense\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(400).json({ error: \"Failed to create expense\" });\n    }\n  });\n\n  app.put(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const expenseData = updateExpenseSchema.parse({ ...req.body, id });\n      const expense = await storage.updateExpense(id, expenseData);\n      \n      if (!expense) {\n        return res.status(404).json({ error: \"Expense not found\" });\n      }\n      \n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n      res.status(400).json({ error: \"Failed to update expense\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteExpense(id);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Expense not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      res.status(500).json({ error: \"Failed to delete expense\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics/wallet-summary\", async (req, res) => {\n    try {\n      const summary = await storage.getWalletSummary();\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching wallet summary:\", error);\n      res.status(500).json({ error: \"Failed to fetch wallet summary\" });\n    }\n  });\n\n  app.get(\"/api/analytics/budget-summary/:month/:year\", async (req, res) => {\n    try {\n      const { month, year } = req.params;\n      const monthNum = parseInt(month);\n      const yearNum = parseInt(year);\n      \n      if (isNaN(monthNum) || isNaN(yearNum) || monthNum < 1 || monthNum > 12) {\n        return res.status(400).json({ error: \"Invalid month or year parameter\" });\n      }\n      \n      const summary = await storage.getWalletSummaryForMonth(monthNum, yearNum);\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching budget summary:\", error);\n      res.status(500).json({ error: \"Failed to fetch budget summary\" });\n    }\n  });\n\n  app.get(\"/api/analytics/category-breakdown\", async (req, res) => {\n    try {\n      const { month, year } = req.query;\n      const monthNum = month ? parseInt(month as string) : undefined;\n      const yearNum = year ? parseInt(year as string) : undefined;\n      \n      const breakdown = await storage.getCategoryBreakdown(monthNum, yearNum);\n      res.json(breakdown);\n    } catch (error) {\n      console.error(\"Error fetching category breakdown:\", error);\n      res.status(500).json({ error: \"Failed to fetch category breakdown\" });\n    }\n  });\n\n  app.get(\"/api/analytics/expense-trends/:days\", async (req, res) => {\n    try {\n      const days = parseInt(req.params.days);\n      \n      if (isNaN(days) || days < 1) {\n        return res.status(400).json({ error: \"Invalid days parameter\" });\n      }\n      \n      const trends = await storage.getExpenseTrends(days);\n      res.json(trends);\n    } catch (error) {\n      console.error(\"Error fetching expense trends:\", error);\n      res.status(500).json({ error: \"Failed to fetch expense trends\" });\n    }\n  });\n\n  app.get(\"/api/analytics/expense-trends-monthly/:months\", async (req, res) => {\n    try {\n      const months = parseInt(req.params.months);\n      \n      if (isNaN(months) || months < 1) {\n        return res.status(400).json({ error: \"Invalid months parameter\" });\n      }\n      \n      const trends = await storage.getMonthlyExpenseTrends(months);\n      res.json(trends);\n    } catch (error) {\n      console.error(\"Error fetching monthly expense trends:\", error);\n      res.status(500).json({ error: \"Failed to fetch monthly expense trends\" });\n    }\n  });\n\n  // Export routes\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const { \n        search, \n        categoryId, \n        startDate, \n        endDate, \n        minAmount, \n        maxAmount \n      } = req.query;\n\n      const filters = {\n        search: search as string,\n        categoryId: categoryId as string,\n        startDate: startDate as string,\n        endDate: endDate as string,\n        minAmount: minAmount ? parseFloat(minAmount as string) : undefined,\n        maxAmount: maxAmount ? parseFloat(maxAmount as string) : undefined,\n      };\n\n      // Remove undefined values\n      Object.keys(filters).forEach(key => {\n        if (filters[key as keyof typeof filters] === undefined || filters[key as keyof typeof filters] === '') {\n          delete filters[key as keyof typeof filters];\n        }\n      });\n\n      const expenses = await storage.getExpenses(\n        Object.keys(filters).length > 0 ? filters : undefined,\n        'date',\n        'desc',\n        999999, // Get all expenses for export\n        0\n      );\n\n      // Convert to CSV format\n      const csvData = [\n        ['Date', 'Description', 'Category', 'Vendor', 'Amount', 'Notes'].join(','),\n        ...expenses.map(expense => [\n          new Date(expense.date).toLocaleDateString(),\n          `\"${expense.description.replace(/\"/g, '\"\"')}\"`,\n          expense.category ? `\"${expense.category.name.replace(/\"/g, '\"\"')}\"` : 'Uncategorized',\n          expense.vendor ? `\"${expense.vendor.replace(/\"/g, '\"\"')}\"` : '',\n          expense.amount,\n          expense.notes ? `\"${expense.notes.replace(/\"/g, '\"\"')}\"` : '',\n        ].join(','))\n      ].join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"expenses-${new Date().toISOString().split('T')[0]}.csv\"`);\n      res.send(csvData);\n    } catch (error) {\n      console.error(\"Error exporting CSV:\", error);\n      res.status(500).json({ error: \"Failed to export CSV\" });\n    }\n  });\n\n  // Object storage routes for receipts\n  app.get(\"/objects/:objectPath(*)\", authProvider.requireAuth(), async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Excel import route\n  app.post(\"/api/expenses/import-excel\", async (req, res) => {\n    try {\n      const { filePath } = req.body;\n      \n      if (!filePath) {\n        return res.status(400).json({ error: \"File path is required\" });\n      }\n\n      // Construct full path to the uploaded file\n      const fullPath = path.join(process.cwd(), filePath);\n      \n      const results = await importExpensesFromExcel(fullPath);\n      \n      res.json(results);\n    } catch (error) {\n      console.error(\"Error importing Excel file:\", error);\n      res.status(500).json({ error: \"Failed to import Excel file\", details: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14218},"server/storage.ts":{"content":"import { type Category, type InsertCategory, type User, type InsertUser, type UpdateUser, type ExpenseWallet, type InsertExpenseWallet, type UpdateExpenseWallet, type Expense, type InsertExpense, type UpdateExpense, type ExpenseWithCategory, type WalletSummary, type CategoryBreakdown, type ExpenseFilters, type ExpenseSortBy, type SortOrder, categories, users, expenseWallets, expenses } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from './db';\nimport { eq, sql, desc, asc, and, gte, lte, lt, like, isNotNull, count, sum } from 'drizzle-orm';\n\nexport interface IStorage {\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n  \n  // User operations\n  getUsers(): Promise<User[]>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByAzureObjectId(azureObjectId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<UpdateUser>): Promise<User | undefined>;\n  updateUserLastLogin(id: string): Promise<void>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Spending Limit operations\n  getExpenseWallets(): Promise<ExpenseWallet[]>;\n  getCurrentExpenseWallet(): Promise<ExpenseWallet | undefined>;\n  createExpenseWallet(wallet: InsertExpenseWallet): Promise<ExpenseWallet>;\n  updateExpenseWallet(id: string, wallet: Partial<InsertExpenseWallet>): Promise<ExpenseWallet | undefined>;\n  deleteExpenseWallet(id: string): Promise<boolean>;\n  \n  // Expense operations\n  getExpenses(filters?: ExpenseFilters, sortBy?: ExpenseSortBy, sortOrder?: SortOrder, limit?: number, offset?: number): Promise<ExpenseWithCategory[]>;\n  getExpenseById(id: string): Promise<ExpenseWithCategory | undefined>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  updateExpense(id: string, expense: Partial<UpdateExpense>): Promise<Expense | undefined>;\n  deleteExpense(id: string): Promise<boolean>;\n  getExpensesCount(filters?: ExpenseFilters): Promise<number>;\n  \n  // Analytics operations\n  getWalletSummary(): Promise<WalletSummary>;\n  getWalletSummaryForMonth(month: number, year: number): Promise<WalletSummary>;\n  getCategoryBreakdown(month?: number, year?: number): Promise<CategoryBreakdown[]>;\n  getExpenseTrends(days: number): Promise<{ date: string; amount: number }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {}\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, 1));\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category || undefined;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    const [updated] = await db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    const [updated] = await db\n      .update(categories)\n      .set({ isActive: 0 })\n      .where(eq(categories.id, id))\n      .returning();\n    return !!updated;\n  }\n\n  // Expense Wallet operations\n  async getExpenseWallets(): Promise<ExpenseWallet[]> {\n    return await db.select().from(expenseWallets).orderBy(desc(expenseWallets.createdAt));\n  }\n\n  async getCurrentExpenseWallet(): Promise<ExpenseWallet | undefined> {\n    const [wallet] = await db\n      .select()\n      .from(expenseWallets)\n      .orderBy(desc(expenseWallets.updatedAt))\n      .limit(1);\n    return wallet || undefined;\n  }\n\n  async createExpenseWallet(wallet: InsertExpenseWallet): Promise<ExpenseWallet> {\n    const [newWallet] = await db\n      .insert(expenseWallets)\n      .values({\n        ...wallet,\n        amount: wallet.amount.toString()\n      })\n      .returning();\n    return newWallet;\n  }\n\n  async updateExpenseWallet(id: string, wallet: Partial<InsertExpenseWallet>): Promise<ExpenseWallet | undefined> {\n    const updateData: any = { ...wallet, updatedAt: new Date() };\n    if (updateData.amount !== undefined) {\n      updateData.amount = updateData.amount.toString();\n    }\n    const [updated] = await db\n      .update(expenseWallets)\n      .set(updateData)\n      .where(eq(expenseWallets.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteExpenseWallet(id: string): Promise<boolean> {\n    const result = await db.delete(expenseWallets).where(eq(expenseWallets.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Expense operations\n  async getExpenses(\n    filters?: ExpenseFilters,\n    sortBy: ExpenseSortBy = 'date',\n    sortOrder: SortOrder = 'desc',\n    limit = 50,\n    offset = 0\n  ): Promise<ExpenseWithCategory[]> {\n    const baseQuery = db\n      .select({\n        id: expenses.id,\n        description: expenses.description,\n        amount: expenses.amount,\n        categoryId: expenses.categoryId,\n        vendor: expenses.vendor,\n        date: expenses.date,\n        receiptPath: expenses.receiptPath,\n        notes: expenses.notes,\n        createdAt: expenses.createdAt,\n        updatedAt: expenses.updatedAt,\n        category: {\n          id: categories.id,\n          name: categories.name,\n          color: categories.color,\n          description: categories.description,\n          isActive: categories.isActive,\n        },\n      })\n      .from(expenses)\n      .leftJoin(categories, eq(expenses.categoryId, categories.id));\n\n    // Apply filters\n    const conditions = [];\n    if (filters) {\n      if (filters.search) {\n        conditions.push(\n          like(expenses.description, `%${filters.search}%`)\n        );\n      }\n      if (filters.categoryId) {\n        conditions.push(eq(expenses.categoryId, filters.categoryId));\n      }\n      if (filters.startDate) {\n        conditions.push(gte(expenses.date, new Date(filters.startDate)));\n      }\n      if (filters.endDate) {\n        conditions.push(lte(expenses.date, new Date(filters.endDate)));\n      }\n      if (filters.minAmount !== undefined) {\n        conditions.push(gte(expenses.amount, filters.minAmount.toString()));\n      }\n      if (filters.maxAmount !== undefined) {\n        conditions.push(lte(expenses.amount, filters.maxAmount.toString()));\n      }\n    }\n\n    // Apply sorting\n    const sortColumn = {\n      date: expenses.date,\n      amount: expenses.amount,\n      description: expenses.description,\n      category: categories.name,\n    }[sortBy];\n\n    const orderFn = sortOrder === 'asc' ? asc : desc;\n\n    // Build final query with all conditions\n    if (conditions.length > 0) {\n      return await baseQuery\n        .where(and(...conditions))\n        .orderBy(orderFn(sortColumn))\n        .limit(limit)\n        .offset(offset);\n    } else {\n      return await baseQuery\n        .orderBy(orderFn(sortColumn))\n        .limit(limit)\n        .offset(offset);\n    }\n  }\n\n  async getExpenseById(id: string): Promise<ExpenseWithCategory | undefined> {\n    const [expense] = await db\n      .select({\n        id: expenses.id,\n        description: expenses.description,\n        amount: expenses.amount,\n        categoryId: expenses.categoryId,\n        vendor: expenses.vendor,\n        date: expenses.date,\n        receiptPath: expenses.receiptPath,\n        notes: expenses.notes,\n        createdAt: expenses.createdAt,\n        updatedAt: expenses.updatedAt,\n        category: {\n          id: categories.id,\n          name: categories.name,\n          color: categories.color,\n          description: categories.description,\n          isActive: categories.isActive,\n        },\n      })\n      .from(expenses)\n      .leftJoin(categories, eq(expenses.categoryId, categories.id))\n      .where(eq(expenses.id, id));\n    return expense || undefined;\n  }\n\n  async createExpense(expense: InsertExpense): Promise<Expense> {\n    const [newExpense] = await db\n      .insert(expenses)\n      .values({\n        ...expense,\n        amount: expense.amount.toString()\n      })\n      .returning();\n    return newExpense;\n  }\n\n  async updateExpense(id: string, expense: Partial<UpdateExpense>): Promise<Expense | undefined> {\n    const updateData: any = { ...expense, updatedAt: new Date() };\n    if (updateData.amount !== undefined && updateData.amount !== null) {\n      updateData.amount = updateData.amount.toString();\n    }\n    const [updated] = await db\n      .update(expenses)\n      .set(updateData)\n      .where(eq(expenses.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteExpense(id: string): Promise<boolean> {\n    const result = await db.delete(expenses).where(eq(expenses.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getExpensesCount(filters?: ExpenseFilters): Promise<number> {\n    const baseQuery = db.select({ count: count() }).from(expenses);\n\n    // Apply same filters as getExpenses\n    const conditions = [];\n    if (filters) {\n      if (filters.search) {\n        conditions.push(like(expenses.description, `%${filters.search}%`));\n      }\n      if (filters.categoryId) {\n        conditions.push(eq(expenses.categoryId, filters.categoryId));\n      }\n      if (filters.startDate) {\n        conditions.push(gte(expenses.date, new Date(filters.startDate)));\n      }\n      if (filters.endDate) {\n        conditions.push(lte(expenses.date, new Date(filters.endDate)));\n      }\n      if (filters.minAmount !== undefined) {\n        conditions.push(gte(expenses.amount, filters.minAmount.toString()));\n      }\n      if (filters.maxAmount !== undefined) {\n        conditions.push(lte(expenses.amount, filters.maxAmount.toString()));\n      }\n    }\n\n    if (conditions.length > 0) {\n      const [result] = await baseQuery.where(and(...conditions));\n      return result.count;\n    } else {\n      const [result] = await baseQuery;\n      return result.count;\n    }\n  }\n\n  // Analytics operations\n  async getWalletSummary(): Promise<WalletSummary> {\n    // Get total wallet amount from all wallet entries\n    const [walletResult] = await db\n      .select({ totalAmount: sum(expenseWallets.amount) })\n      .from(expenseWallets);\n    const walletAmount = parseFloat(walletResult.totalAmount || '0');\n\n    // Get total expenses\n    const [expenseResult] = await db\n      .select({ totalAmount: sum(expenses.amount) })\n      .from(expenses);\n    const totalExpenses = parseFloat(expenseResult.totalAmount || '0');\n\n    // Get expense count\n    const [countResult] = await db\n      .select({ count: count() })\n      .from(expenses);\n    const expenseCount = countResult.count;\n\n    const remainingAmount = walletAmount - totalExpenses;\n    const averageExpense = expenseCount > 0 ? totalExpenses / expenseCount : 0;\n    const percentageUsed = walletAmount > 0 ? (totalExpenses / walletAmount) * 100 : 0;\n\n    return {\n      walletAmount,\n      totalExpenses,\n      remainingAmount,\n      expenseCount,\n      averageExpense,\n      percentageUsed,\n    };\n  }\n\n  async getWalletSummaryForMonth(month: number, year: number): Promise<WalletSummary> {\n    // Calculate total wallet balance from all wallet entries (like prepaid recharge)\n    const [walletResult] = await db\n      .select({ totalAmount: sum(expenseWallets.amount) })\n      .from(expenseWallets);\n    const totalWalletBalance = parseFloat(walletResult.totalAmount || '0');\n\n    // Get ALL expenses ever made (to calculate remaining balance)\n    const [allExpenseResult] = await db\n      .select({ totalAmount: sum(expenses.amount) })\n      .from(expenses);\n    const totalExpensesEver = parseFloat(allExpenseResult.totalAmount || '0');\n    \n    // Calculate available balance (like prepaid balance remaining)\n    const availableBalance = totalWalletBalance - totalExpensesEver;\n\n    // Filter expenses for the specific month and year only\n    const startOfMonth = new Date(year, month - 1, 1);\n    const nextMonthStart = new Date(year, month, 1);\n    \n    const [monthlyExpenseResult] = await db\n      .select({ \n        totalAmount: sum(expenses.amount),\n        count: count()\n      })\n      .from(expenses)\n      .where(and(\n        gte(expenses.date, startOfMonth),\n        lt(expenses.date, nextMonthStart)\n      ));\n\n    const monthlyExpenseAmount = parseFloat(monthlyExpenseResult.totalAmount || '0');\n    const monthlyExpenseCount = monthlyExpenseResult.count;\n    const monthlyAverageExpense = monthlyExpenseCount > 0 ? monthlyExpenseAmount / monthlyExpenseCount : 0;\n    \n    // Percentage used is monthly expenses vs total wallet balance\n    const monthlyPercentageUsed = totalWalletBalance > 0 ? (monthlyExpenseAmount / totalWalletBalance) * 100 : 0;\n\n    // Calculate daily average for the month\n    const currentDate = new Date();\n    const daysInMonth = new Date(year, month, 0).getDate();\n    const isCurrentMonth = currentDate.getMonth() === month - 1 && currentDate.getFullYear() === year;\n    \n    // For current month, use completed days only; for past/future months use full month\n    let daysPassedForAverage = daysInMonth;\n    if (isCurrentMonth) {\n      // Use completed days only (current date - 1, but at least 1)\n      daysPassedForAverage = Math.max(currentDate.getDate() - 1, 1);\n    }\n    \n    // Calculate daily average (avoid division by zero) and round to 2 decimals\n    const dailyAverage = daysPassedForAverage > 0 ? \n      Math.round((monthlyExpenseAmount / daysPassedForAverage) * 100) / 100 : 0;\n    \n    // Calculate projected total\n    let projectedTotal = monthlyExpenseAmount;\n    if (isCurrentMonth && currentDate.getDate() < daysInMonth) {\n      // For current month: current expenses + (remaining days × daily average)\n      const remainingDays = daysInMonth - currentDate.getDate();\n      projectedTotal = Math.round((monthlyExpenseAmount + (dailyAverage * remainingDays)) * 100) / 100;\n    }\n    \n    // Calculate days left in month\n    const currentYear = currentDate.getFullYear();\n    const daysLeft = isCurrentMonth ? daysInMonth - currentDate.getDate() : \n                     (year > currentYear || (year === currentYear && month > currentDate.getMonth() + 1)) ? daysInMonth : 0;\n\n    return {\n      walletAmount: totalWalletBalance,           // Total wallet balance (all additions)\n      monthlyBudget: totalWalletBalance,         // Same as wallet amount for consistency\n      totalExpenses: monthlyExpenseAmount,       // Expenses for this month only\n      remainingAmount: availableBalance,         // Available balance after all expenses\n      expenseCount: monthlyExpenseCount,         // Count for this month only\n      averageExpense: monthlyAverageExpense,     // Average for this month only\n      percentageUsed: monthlyPercentageUsed,     // Monthly expenses vs total wallet\n      dailyAverage,\n      projectedTotal,\n      daysLeft,\n    };\n  }\n\n  async getCategoryBreakdown(month?: number, year?: number): Promise<CategoryBreakdown[]> {\n    let query = db\n      .select({\n        id: categories.id,\n        name: categories.name,\n        color: categories.color,\n        description: categories.description,\n        isActive: categories.isActive,\n        totalAmount: sum(expenses.amount),\n        expenseCount: count(expenses.id),\n      })\n      .from(categories)\n      .leftJoin(expenses, eq(categories.id, expenses.categoryId))\n      .where(eq(categories.isActive, 1))\n      .groupBy(categories.id, categories.name, categories.color, categories.description, categories.isActive);\n\n    // Filter by month/year if provided\n    if (month && year) {\n      const startOfMonth = new Date(year, month - 1, 1);\n      const endOfMonth = new Date(year, month, 0);\n      \n      query = db\n        .select({\n          id: categories.id,\n          name: categories.name,\n          color: categories.color,\n          description: categories.description,\n          isActive: categories.isActive,\n          totalAmount: sum(expenses.amount),\n          expenseCount: count(expenses.id),\n        })\n        .from(categories)\n        .leftJoin(expenses, and(\n          eq(categories.id, expenses.categoryId),\n          gte(expenses.date, startOfMonth),\n          lte(expenses.date, endOfMonth)\n        ))\n        .where(eq(categories.isActive, 1))\n        .groupBy(categories.id, categories.name, categories.color, categories.description, categories.isActive);\n    }\n\n    const results = await query;\n    \n    // Calculate total amount for percentage calculation\n    const totalAmount = results.reduce((sum, cat) => sum + parseFloat(cat.totalAmount || '0'), 0);\n    \n    return results.map(cat => ({\n      ...cat,\n      totalAmount: parseFloat(cat.totalAmount || '0'),\n      percentage: totalAmount > 0 ? (parseFloat(cat.totalAmount || '0') / totalAmount) * 100 : 0,\n    }));\n  }\n\n  async getExpenseTrends(days: number): Promise<{ date: string; amount: number }[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const results = await db\n      .select({\n        date: sql<string>`DATE(${expenses.date})`,\n        amount: sum(expenses.amount),\n      })\n      .from(expenses)\n      .where(gte(expenses.date, startDate))\n      .groupBy(sql`DATE(${expenses.date})`)\n      .orderBy(sql`DATE(${expenses.date})`);\n\n    return results.map(result => ({\n      date: result.date,\n      amount: parseFloat(result.amount || '0'),\n    }));\n  }\n\n  async getMonthlyExpenseTrends(months: number): Promise<{ month: string; amount: number }[]> {\n    const startDate = new Date();\n    startDate.setMonth(startDate.getMonth() - months);\n    startDate.setDate(1); // Start from first day of the month\n\n    const results = await db\n      .select({\n        month: sql<string>`TO_CHAR(${expenses.date}, 'YYYY-MM')`,\n        amount: sum(expenses.amount),\n      })\n      .from(expenses)\n      .where(gte(expenses.date, startDate))\n      .groupBy(sql`TO_CHAR(${expenses.date}, 'YYYY-MM')`)\n      .orderBy(sql`TO_CHAR(${expenses.date}, 'YYYY-MM')`);\n\n    return results.map(result => ({\n      month: result.month,\n      amount: parseFloat(result.amount || '0'),\n    }));\n  }\n\n  // User management methods\n  async getUsers(): Promise<User[]> {\n    const result = await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt));\n    return result;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const result = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n    return result[0];\n  }\n\n  async getUserByAzureObjectId(azureObjectId: string): Promise<User | undefined> {\n    const result = await db\n      .select()\n      .from(users)\n      .where(eq(users.azureObjectId, azureObjectId))\n      .limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const newUser = {\n      ...user,\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const [result] = await db\n      .insert(users)\n      .values(newUser)\n      .returning();\n    \n    return result;\n  }\n\n  async updateUser(id: string, user: Partial<UpdateUser>): Promise<User | undefined> {\n    const updateData = {\n      ...user,\n      updatedAt: new Date(),\n    };\n\n    const [result] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n\n    return result;\n  }\n\n  async updateUserLastLogin(id: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        lastLoginAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id));\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db\n      .delete(users)\n      .where(eq(users.id, id));\n\n    return (result.rowCount ?? 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":20412},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  color: text(\"color\").notNull().default(\"#3b82f6\"),\n  description: text(\"description\"),\n  isActive: integer(\"is_active\").notNull().default(1),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"admin\" or \"user\"\n  azureObjectId: text(\"azure_object_id\").unique(),\n  isActive: integer(\"is_active\").notNull().default(1),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const expenseWallets = pgTable(\"expense_wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  date: timestamp(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id).notNull(),\n  vendor: text(\"vendor\"),\n  date: timestamp(\"date\").notNull(),\n  receiptPath: text(\"receipt_path\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  isActive: true,\n});\n\nexport const insertExpenseWalletSchema = createInsertSchema(expenseWallets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform((val) => {\n    const numVal = typeof val === 'string' ? parseFloat(val) : val;\n    if (isNaN(numVal) || numVal <= 0) {\n      throw new Error('Amount must be a positive number');\n    }\n    return numVal;\n  }),\n  date: z.string().transform((val) => new Date(val)),\n});\n\nexport const updateExpenseWalletSchema = insertExpenseWalletSchema.partial().extend({\n  id: z.string(),\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  date: z.string().transform((val) => new Date(val)),\n});\n\nexport const updateExpenseSchema = insertExpenseSchema.partial().extend({\n  id: z.string(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLoginAt: true,\n});\n\nexport const updateUserSchema = insertUserSchema.partial().extend({\n  id: z.string(),\n});\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type ExpenseWallet = typeof expenseWallets.$inferSelect;\nexport type InsertExpenseWallet = z.infer<typeof insertExpenseWalletSchema>;\nexport type UpdateExpenseWallet = z.infer<typeof updateExpenseWalletSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type UpdateExpense = z.infer<typeof updateExpenseSchema>;\n\n// Extended types for API responses\nexport type ExpenseWithCategory = Expense & {\n  category: Category | null;\n};\n\nexport type WalletSummary = {\n  walletAmount: number;\n  totalExpenses: number;\n  remainingAmount: number;\n  expenseCount: number;\n  averageExpense: number;\n  percentageUsed: number;\n  monthlyBudget?: number;\n  dailyAverage?: number;\n  projectedTotal?: number;\n  daysLeft?: number;\n};\n\nexport type CategoryBreakdown = Category & {\n  totalAmount: number;\n  percentage: number;\n  expenseCount: number;\n};\n\nexport type ExpenseFilters = {\n  search?: string;\n  categoryId?: string;\n  startDate?: string;\n  endDate?: string;\n  minAmount?: number;\n  maxAmount?: number;\n};\n\nexport type ExpenseSortBy = 'date' | 'amount' | 'description' | 'category';\nexport type SortOrder = 'asc' | 'desc';\n\n// Define relations\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  expenses: many(expenses),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  category: one(categories, {\n    fields: [expenses.categoryId],\n    references: [categories.id],\n  }),\n}));\n","size_bytes":5106},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport AddExpense from \"@/pages/AddExpense\";\nimport AllExpenses from \"@/pages/AllExpenses\";\nimport Categories from \"@/pages/Categories\";\nimport ExpenseWalletSetup from \"@/pages/ExpenseWalletSetup\";\nimport Settings from \"@/pages/Settings\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <ProtectedRoute><Dashboard /></ProtectedRoute>} />\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute><Dashboard /></ProtectedRoute>} />\n      <Route path=\"/add-expense\" component={() => <ProtectedRoute><AddExpense /></ProtectedRoute>} />\n      <Route path=\"/expenses\" component={() => <ProtectedRoute><AllExpenses /></ProtectedRoute>} />\n      <Route path=\"/categories\" component={() => <ProtectedRoute><Categories /></ProtectedRoute>} />\n      <Route path=\"/budget\" component={() => <ProtectedRoute><ExpenseWalletSetup /></ProtectedRoute>} />\n      <Route path=\"/settings\" component={() => <ProtectedRoute><Settings /></ProtectedRoute>} />\n      <Route path=\"/user-management\" component={() => <ProtectedRoute requireAdmin><UserManagement /></ProtectedRoute>} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1838},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(210, 100%, 44%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(183, 100%, 38%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(210, 100%, 44%);\n  --chart-1: hsl(210, 100%, 44%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(210, 100%, 44%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 100%, 44%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(210, 100%, 44%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 2px 4px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 4px 6px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 8px 10px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 100%, 44%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(183, 100%, 38%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(210, 100%, 44%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(210, 100%, 44%);\n  --chart-1: hsl(210, 100%, 44%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(210, 100%, 44%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(210, 100%, 44%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(210, 100%, 44%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 1px 2px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 2px 4px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 4px 6px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00), 0px 8px 10px -1px hsl(210, 100%, 44%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 100%, 44%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n/* Custom styles for expense tracker */\n.sidebar-shadow {\n  box-shadow: 2px 0 8px rgba(0,0,0,0.1);\n}\n\n.expense-card {\n  transition: all 0.2s ease-in-out;\n}\n\n.expense-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n}\n\n.budget-progress {\n  background: linear-gradient(90deg, hsl(var(--secondary)) 0%, hsl(var(--primary)) 100%);\n}\n\n/* Chart container styling */\n.chart-container {\n  height: 300px;\n}\n\n/* Mobile sidebar transitions */\n@media (max-width: 768px) {\n  .sidebar {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .sidebar.open {\n    transform: translateX(0);\n  }\n}\n\n/* Custom scrollbar styling */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n\n/* File upload drop zone styling */\n.upload-drop-zone {\n  border: 2px dashed hsl(var(--border));\n  transition: all 0.2s ease-in-out;\n}\n\n.upload-drop-zone:hover {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.05);\n}\n\n.upload-drop-zone.drag-over {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.1);\n}\n\n/* Animation for loading states */\n@keyframes pulse-subtle {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n.animate-pulse-subtle {\n  animation: pulse-subtle 2s ease-in-out infinite;\n}\n\n/* Custom focus styles */\n.focus-ring:focus {\n  outline: 2px solid hsl(var(--ring));\n  outline-offset: 2px;\n}\n\n/* Table hover effects */\n.table-row-hover:hover {\n  background-color: hsl(var(--muted) / 0.5);\n}\n\n/* Badge variations */\n.badge-success {\n  background-color: hsl(var(--chart-2) / 0.1);\n  color: hsl(var(--chart-2));\n}\n\n.badge-warning {\n  background-color: hsl(var(--chart-3) / 0.1);\n  color: hsl(var(--chart-3));\n}\n\n.badge-danger {\n  background-color: hsl(var(--destructive) / 0.1);\n  color: hsl(var(--destructive));\n}\n\n/* Progress bar animations */\n.progress-bar {\n  transition: width 0.5s ease-in-out;\n}\n\n/* Card hover effects */\n.card-hover:hover {\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  transform: translateY(-1px);\n  transition: all 0.2s ease-in-out;\n}\n\n/* Button loading state */\n.button-loading {\n  position: relative;\n  color: transparent;\n}\n\n.button-loading::after {\n  content: '';\n  position: absolute;\n  width: 16px;\n  height: 16px;\n  top: 50%;\n  left: 50%;\n  margin-left: -8px;\n  margin-top: -8px;\n  border: 2px solid transparent;\n  border-top-color: currentColor;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* Form field animations */\n.form-field {\n  transition: all 0.2s ease-in-out;\n}\n\n.form-field:focus-within {\n  transform: translateY(-1px);\n}\n\n/* Toast notification positioning */\n.toast-container {\n  position: fixed;\n  top: 1rem;\n  right: 1rem;\n  z-index: 100;\n}\n\n/* Modal backdrop blur */\n.modal-backdrop {\n  backdrop-filter: blur(4px);\n  background-color: rgba(0, 0, 0, 0.5);\n}\n","size_bytes":7846},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BudgetCards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Wallet, TrendingUp, TrendingDown, Receipt } from \"lucide-react\";\nimport { MONTHS } from \"@/lib/constants\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface BudgetCardsProps {\n  month: number;\n  year: number;\n}\n\nexport default function BudgetCards({ month, year }: BudgetCardsProps) {\n  const { data: budgetSummary, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/budget-summary\", month, year],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/budget-summary/${month}/${year}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-muted rounded-lg\" />\n                <div className=\"w-20 h-5 bg-muted rounded-full\" />\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"w-24 h-4 bg-muted rounded\" />\n                <div className=\"w-32 h-8 bg-muted rounded\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!budgetSummary) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-muted-foreground\">Failed to load expense summary</div>\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Total Wallet Balance\",\n      value: formatCurrency(budgetSummary.walletAmount),\n      icon: Wallet,\n      color: \"bg-primary/10 text-primary\",\n      badge: \"TOTAL RECHARGED\",\n    },\n    {\n      title: \"Monthly Expenses\",\n      value: formatCurrency(budgetSummary.totalExpenses),\n      icon: TrendingUp,\n      color: \"bg-destructive/10 text-destructive\",\n      badge: `${MONTHS[month - 1].substring(0, 3).toUpperCase()} ${year}`,\n    },\n    {\n      title: \"Available Balance\",\n      value: formatCurrency(budgetSummary.remainingAmount),\n      icon: TrendingDown,\n      color: budgetSummary.remainingAmount < 0 ? \"bg-destructive/10 text-destructive\" : \"bg-green-100 text-green-600\",\n      badge: \"REMAINING\",\n    },\n    {\n      title: \"Monthly Transactions\",\n      value: budgetSummary.expenseCount.toString(),\n      icon: Receipt,\n      color: \"bg-accent text-muted-foreground\",\n      badge: `${MONTHS[month - 1].substring(0, 3).toUpperCase()}`,\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {cards.map((card, index) => {\n        const Icon = card.icon;\n        return (\n          <Card key={index}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${card.color} rounded-lg flex items-center justify-center`}>\n                  <Icon className=\"w-6 h-6\" />\n                </div>\n                <span className=\"text-xs font-medium text-muted-foreground bg-accent px-2 py-1 rounded-full\">\n                  {card.badge}\n                </span>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-medium text-muted-foreground mb-1\">{card.title}</h3>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid={`text-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {card.value}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3848},"client/src/components/ExpenseCharts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from \"recharts\";\nimport { useState } from \"react\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface ExpenseChartsProps {\n  month?: number;\n  year?: number;\n}\n\nexport default function ExpenseCharts({ month, year }: ExpenseChartsProps) {\n  const [trendMonths, setTrendMonths] = useState(\"6\");\n\n  // Fetch monthly expense trends\n  const { data: trendsData, isLoading: trendsLoading } = useQuery({\n    queryKey: [\"/api/analytics/expense-trends-monthly\", trendMonths],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/expense-trends-monthly/${trendMonths}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  // Fetch category breakdown\n  const { data: categoryData, isLoading: categoryLoading } = useQuery({\n    queryKey: [\"/api/analytics/category-breakdown\", month, year],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (month) params.append('month', month.toString());\n      if (year) params.append('year', year.toString());\n      \n      const response = await fetch(`/api/analytics/category-breakdown?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  const formatTrendData = (data: any[]) => {\n    return data.map(item => ({\n      ...item,\n      amount: Number(item.amount) || 0,\n      month: item.month ? new Date(item.month + '-01').toLocaleDateString('en-US', { \n        month: 'short',\n        year: 'numeric' \n      }) : item.date,\n    }));\n  };\n\n  const getMonthsLabel = (months: string) => {\n    switch (months) {\n      case \"3\": return \"Last 3 months\";\n      case \"6\": return \"Last 6 months\";\n      case \"12\": return \"Last 12 months\";\n      default: return \"Last 6 months\";\n    }\n  };\n\n  // Colors for pie chart - distinct colors like the reference image\n  const COLORS = [\n    \"#3B82F6\", // Blue\n    \"#8B5CF6\", // Purple  \n    \"#A855F7\", // Violet\n    \"#EC4899\", // Pink\n    \"#EF4444\", // Red\n    \"#F97316\", // Orange\n    \"#EAB308\", // Yellow\n    \"#84CC16\", // Lime\n    \"#22C55E\", // Green\n    \"#10B981\", // Emerald\n    \"#06B6D4\", // Cyan\n    \"#0EA5E9\", // Sky blue\n    \"#6366F1\", // Indigo\n    \"#8B5A2B\", // Brown\n    \"#6B7280\", // Gray\n  ];\n\n  const formatPieData = (data: any[]) => {\n    const total = data.reduce((sum, item) => sum + parseFloat(item.totalAmount), 0);\n    return data.map((item, index) => {\n      const value = parseFloat(item.totalAmount);\n      return {\n        ...item,\n        value,\n        percentage: (value / total) * 100,\n        fill: COLORS[index % COLORS.length],\n      };\n    });\n  };\n\n  // Removed custom label function - no longer showing percentages on pie slices\n\n  // Calculate total amount from trends data\n  const totalAmount = trendsData?.reduce((sum: number, item: any) => sum + (parseFloat(item.amount) || 0), 0) || 0;\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Expense Trends Chart */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Monthly Expense Trends</CardTitle>\n            <Select value={trendMonths} onValueChange={setTrendMonths}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-trend-period\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"3\">Last 3 months</SelectItem>\n                <SelectItem value=\"6\">Last 6 months</SelectItem>\n                <SelectItem value=\"12\">Last 12 months</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Total Amount Display */}\n          {trendsData && trendsData.length > 0 && (\n            <div className=\"mb-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-total-amount\">\n                {formatCurrency(totalAmount)}\n              </div>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Total for {getMonthsLabel(trendMonths)}\n              </div>\n            </div>\n          )}\n          <div className=\"h-[300px]\" data-testid=\"chart-expense-trends\">\n            {trendsLoading ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span className=\"text-muted-foreground\">Loading chart...</span>\n                </div>\n              </div>\n            ) : trendsData && trendsData.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart \n                  data={formatTrendData(trendsData)}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid \n                    strokeDasharray=\"2 2\" \n                    stroke=\"hsl(var(--border))\" \n                    vertical={false}\n                  />\n                  <XAxis \n                    dataKey=\"month\" \n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={11}\n                    tickLine={false}\n                    axisLine={false}\n                  />\n                  <YAxis \n                    stroke=\"hsl(var(--muted-foreground))\"\n                    fontSize={11}\n                    tickLine={false}\n                    axisLine={false}\n                    tickFormatter={(value) => formatCurrency(value)}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: \"rgba(0, 0, 0, 0.9)\",\n                      border: \"1px solid rgba(255, 255, 255, 0.2)\",\n                      borderRadius: \"8px\",\n                      color: \"white\",\n                      boxShadow: \"0 8px 16px rgba(0, 0, 0, 0.3)\",\n                      fontSize: \"14px\",\n                      fontWeight: \"500\",\n                    }}\n                    formatter={(value: number) => [formatCurrency(value), \"Amount\"]}\n                    cursor={{ fill: 'rgba(34, 197, 94, 0.1)' }}\n                    labelStyle={{ color: \"white\", fontSize: \"12px\" }}\n                  />\n                  <Bar\n                    dataKey=\"amount\"\n                    fill=\"#22C55E\"\n                    radius={[4, 4, 0, 0]}\n                    maxBarSize={60}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center text-muted-foreground\">\n                  <div className=\"text-4xl mb-2\">📊</div>\n                  <p>No data available</p>\n                  <p className=\"text-xs\">Add some expenses to see trends</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Category Breakdown */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle>Expense Breakdown by Category</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-8\">\n          <div className=\"h-[350px]\" data-testid=\"category-breakdown\">\n            {categoryLoading ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span className=\"text-muted-foreground\">Loading chart...</span>\n                </div>\n              </div>\n            ) : categoryData && categoryData.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={formatPieData(categoryData)}\n                    cx=\"50%\"\n                    cy=\"45%\"\n                    outerRadius={110}\n                    dataKey=\"value\"\n                    stroke=\"#fff\"\n                    strokeWidth={2}\n                  >\n                    {formatPieData(categoryData).map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.fill} />\n                    ))}\n                  </Pie>\n                  <Legend \n                    layout=\"horizontal\"\n                    verticalAlign=\"bottom\"\n                    align=\"center\"\n                    wrapperStyle={{\n                      fontSize: '11px',\n                      paddingTop: '20px',\n                      lineHeight: '1.8'\n                    }}\n                    formatter={(value: string, entry: any) => (\n                      <span style={{ color: \"hsl(var(--foreground))\", fontSize: '11px' }}>\n                        {value} - {formatCurrency(entry.payload.value)}\n                      </span>\n                    )}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center text-muted-foreground\">\n                  <div className=\"text-4xl mb-2\">📊</div>\n                  <p>No category data available</p>\n                  <p className=\"text-xs\">Add some expenses to see breakdown</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10107},"client/src/components/ExpenseForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertExpenseSchema, type Category } from \"@shared/schema\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Upload, FileText, X } from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\n\n// Form input type (before schema transformation)\ntype ExpenseFormData = {\n  description: string;\n  amount: string;\n  categoryId: string;\n  vendor?: string | null;\n  date: string; // Input as string, gets transformed to Date by schema\n  receiptPath?: string | null;\n  notes?: string | null;\n};\n\ninterface ExpenseFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n  initialData?: Partial<ExpenseFormData>;\n  expenseId?: string; // For edit mode\n}\n\nexport default function ExpenseForm({ onSuccess, onCancel, initialData, expenseId }: ExpenseFormProps) {\n  const isEditMode = !!expenseId;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadedReceiptUrl, setUploadedReceiptUrl] = useState<string | null>(initialData?.receiptPath || null);\n  const [uploadedReceipts, setUploadedReceipts] = useState<string[]>(initialData?.receiptPath ? [initialData.receiptPath] : []);\n\n  const form = useForm<ExpenseFormData>({\n    resolver: zodResolver(insertExpenseSchema),\n    defaultValues: {\n      description: initialData?.description || \"\",\n      amount: initialData?.amount || \"\",\n      categoryId: initialData?.categoryId || \"\",\n      vendor: initialData?.vendor || \"\",\n      date: initialData?.date || new Date().toISOString().split('T')[0],\n      notes: initialData?.notes || \"\",\n      receiptPath: initialData?.receiptPath || null,\n    },\n  });\n\n  // Fetch categories\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Create/Update expense mutation\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: ExpenseFormData) => {\n      const method = isEditMode ? \"PUT\" : \"POST\";\n      const url = isEditMode ? `/api/expenses/${expenseId}` : \"/api/expenses\";\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      toast({\n        title: \"Success\",\n        description: isEditMode ? \"Expense updated successfully\" : \"Expense created successfully\",\n      });\n      form.reset();\n      setUploadedReceiptUrl(null);\n      setUploadedReceipts([]);\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: isEditMode ? \"Failed to update expense\" : \"Failed to create expense\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error creating expense:\", error);\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const removeReceipt = (receiptPath: string) => {\n    setUploadedReceipts(prev => prev.filter(path => path !== receiptPath));\n    if (receiptPath === form.getValues('receiptPath')) {\n      form.setValue('receiptPath', null);\n      setUploadedReceiptUrl(null);\n    }\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadUrl = result.successful[0].uploadURL;\n      if (uploadUrl) {\n        setUploadedReceiptUrl(uploadUrl);\n        \n        // Extract the object path from the upload URL\n        const url = new URL(uploadUrl);\n        const pathParts = url.pathname.split('/');\n        const bucketIndex = pathParts.findIndex(part => part === 'uploads');\n        if (bucketIndex !== -1) {\n          const objectId = pathParts.slice(bucketIndex + 1).join('/');\n          const receiptPath = `/objects/uploads/${objectId}`;\n          form.setValue('receiptPath', receiptPath);\n          setUploadedReceipts(prev => [...prev, receiptPath]);\n        }\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"Receipt uploaded successfully\",\n      });\n    }\n  };\n\n  const onSubmit = (data: ExpenseFormData) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle>Add New Expense</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        {...field}\n                        value={field.value}\n                        onChange={(e) => field.onChange(e.target.value)}\n                        data-testid=\"input-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Amount (₹)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        data-testid=\"input-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter expense description\"\n                      {...field}\n                      data-testid=\"input-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Select a category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories.map((category) => (\n                          <SelectItem key={category.id} value={category.id}>\n                            {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"vendor\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vendor (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter vendor name\"\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-vendor\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div>\n              <Label>Receipt Upload</Label>\n              <div className=\"mt-2 space-y-3\">\n                {/* Show uploaded receipts */}\n                {uploadedReceipts.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      {uploadedReceipts.length} receipt{uploadedReceipts.length !== 1 ? 's' : ''} uploaded\n                    </p>\n                    {uploadedReceipts.map((receiptPath, index) => (\n                      <div key={receiptPath} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg border\">\n                        <div className=\"flex items-center space-x-2\">\n                          <FileText className=\"w-4 h-4 text-primary\" />\n                          <span className=\"text-sm font-medium\">Receipt {index + 1}</span>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeReceipt(receiptPath)}\n                          className=\"h-6 w-6 p-0 hover:bg-destructive/10 hover:text-destructive\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Upload button */}\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760} // 10MB\n                  onGetUploadParameters={handleGetUploadParameters}\n                  onComplete={handleUploadComplete}\n                  buttonClassName=\"w-full\"\n                >\n                  <div className=\"flex items-center justify-center space-x-2 p-6 border-2 border-dashed border-border rounded-lg hover:border-primary/50 transition-colors\">\n                    <Upload className=\"w-6 h-6 text-muted-foreground\" />\n                    <div className=\"text-center\">\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {uploadedReceipts.length > 0 ? \"Add another receipt\" : \"Click to upload receipt\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">PNG, JPG, PDF up to 10MB</p>\n                    </div>\n                  </div>\n                </ObjectUploader>\n              </div>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      rows={3}\n                      placeholder=\"Add any additional notes about this expense\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center justify-end space-x-3 pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  form.reset();\n                  setUploadedReceiptUrl(null);\n                  setUploadedReceipts([]);\n                  onCancel?.();\n                }}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createExpenseMutation.isPending || categoriesLoading}\n                data-testid=\"button-submit\"\n              >\n                {createExpenseMutation.isPending && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                {isEditMode ? \"Update Expense\" : \"Add Expense\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13342},"client/src/components/ExpenseTable.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { updateExpenseSchema } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Eye, Edit, Trash2, Paperclip, ChevronUp, ChevronDown, Download, X, Upload, FileText } from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\nimport type { ExpenseFilters, ExpenseSortBy, SortOrder, Category, UpdateExpense } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface ExpenseTableProps {\n  showFilters?: boolean;\n  limit?: number;\n  title?: string;\n}\n\ninterface EditExpenseFormInlineProps {\n  expense: any;\n  categories: Category[];\n  onSubmit: (data: Partial<UpdateExpense>) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nfunction EditExpenseFormInline({ expense, categories, onSubmit, onCancel, isLoading }: EditExpenseFormInlineProps) {\n  const [uploadedReceiptUrl, setUploadedReceiptUrl] = useState<string | null>(expense?.receiptPath || null);\n  const [uploadedReceipts, setUploadedReceipts] = useState<string[]>(expense?.receiptPath ? [expense.receiptPath] : []);\n  const { toast } = useToast();\n  \n  const form = useForm<Partial<UpdateExpense>>({\n    resolver: zodResolver(updateExpenseSchema.partial()),\n    defaultValues: {\n      description: expense.description,\n      amount: expense.amount,\n      categoryId: expense.categoryId,\n      vendor: expense.vendor ?? '',\n      date: new Date(expense.date).toISOString().split('T')[0] as any,\n      notes: expense.notes ?? '',\n      receiptPath: expense.receiptPath ?? null,\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const removeReceipt = (receiptPath: string) => {\n    setUploadedReceipts(prev => prev.filter(path => path !== receiptPath));\n    if (receiptPath === form.getValues('receiptPath')) {\n      form.setValue('receiptPath', null);\n      setUploadedReceiptUrl(null);\n    }\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadUrl = result.successful[0].uploadURL;\n      if (uploadUrl) {\n        setUploadedReceiptUrl(uploadUrl);\n        \n        // Extract the object path from the upload URL\n        const url = new URL(uploadUrl);\n        const pathParts = url.pathname.split('/');\n        const bucketIndex = pathParts.findIndex(part => part === 'uploads');\n        if (bucketIndex !== -1) {\n          const objectId = pathParts.slice(bucketIndex + 1).join('/');\n          const receiptPath = `/objects/uploads/${objectId}`;\n          form.setValue('receiptPath', receiptPath);\n          setUploadedReceipts(prev => [...prev, receiptPath]);\n        }\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"Receipt uploaded successfully\",\n      });\n    }\n  };\n\n  const handleSubmit = (data: Partial<UpdateExpense>) => {\n    const submitData = {\n      ...data,\n      date: data.date ? new Date(data.date) : undefined,\n      amount: data.amount?.toString(),\n    };\n    onSubmit(submitData);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter description\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"amount\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Amount (₹)</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0.00\"\n                  {...field}\n                  onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"categoryId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Category</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a category\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      <div className=\"flex items-center space-x-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: category.color }}\n                        />\n                        <span>{category.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"vendor\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Vendor (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter vendor name\" {...field} value={field.value || \"\"} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"date\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Date</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"date\"\n                  {...field}\n                  value={field.value?.toString().split('T')[0] || ''}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes (Optional)</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Add any additional notes...\" {...field} value={field.value || \"\"} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div>\n          <Label>Receipt Upload</Label>\n          <div className=\"mt-2 space-y-3\">\n            {/* Show uploaded receipts */}\n            {uploadedReceipts.length > 0 && (\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {uploadedReceipts.length} receipt{uploadedReceipts.length !== 1 ? 's' : ''} uploaded\n                </p>\n                {uploadedReceipts.map((receiptPath, index) => (\n                  <div key={receiptPath} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg border\">\n                    <div className=\"flex items-center space-x-2\">\n                      <FileText className=\"w-4 h-4 text-primary\" />\n                      <span className=\"text-sm font-medium\">Receipt {index + 1}</span>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeReceipt(receiptPath)}\n                      className=\"h-6 w-6 p-0 hover:bg-destructive/10 hover:text-destructive\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n            \n            {/* Upload button */}\n            <ObjectUploader\n              maxNumberOfFiles={1}\n              maxFileSize={10485760} // 10MB\n              onGetUploadParameters={handleGetUploadParameters}\n              onComplete={handleUploadComplete}\n              buttonClassName=\"w-full\"\n            >\n              <div className=\"flex items-center justify-center space-x-2 p-4 border-2 border-dashed border-border rounded-lg hover:border-primary/50 transition-colors\">\n                <Upload className=\"w-5 h-5 text-muted-foreground\" />\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {uploadedReceipts.length > 0 ? \"Replace receipt\" : \"Click to upload receipt\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">PNG, JPG, PDF up to 10MB</p>\n                </div>\n              </div>\n            </ObjectUploader>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n            disabled={isLoading}\n          >\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isLoading}>\n            {isLoading ? \"Updating...\" : \"Update Expense\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default function ExpenseTable({ showFilters = true, limit = 50, title = \"Expenses\" }: ExpenseTableProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [filters, setFilters] = useState<ExpenseFilters>({});\n  const [sortBy, setSortBy] = useState<ExpenseSortBy>('date');\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [viewExpense, setViewExpense] = useState<any>(null);\n  const [editExpense, setEditExpense] = useState<any>(null);\n  const [isViewOpen, setIsViewOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n\n  // Fetch categories for filter\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Fetch expenses\n  const { data: expenseData, isLoading } = useQuery({\n    queryKey: [\"/api/expenses\", filters, sortBy, sortOrder, limit, currentPage * limit],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        ...(filters.search && { search: filters.search }),\n        ...(filters.categoryId && { categoryId: filters.categoryId }),\n        ...(filters.startDate && { startDate: filters.startDate }),\n        ...(filters.endDate && { endDate: filters.endDate }),\n        ...(filters.minAmount !== undefined && { minAmount: filters.minAmount.toString() }),\n        ...(filters.maxAmount !== undefined && { maxAmount: filters.maxAmount.toString() }),\n        sortBy,\n        sortOrder,\n        limit: limit.toString(),\n        offset: (currentPage * limit).toString(),\n      });\n\n      const response = await fetch(`/api/expenses?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  // Delete expense mutation\n  const deleteExpenseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/expenses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Expense deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Edit expense mutation\n  const editExpenseMutation = useMutation({\n    mutationFn: async (data: { id: string; expense: Partial<UpdateExpense> }) => {\n      await apiRequest(\"PUT\", `/api/expenses/${data.id}`, data.expense);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      setIsEditOpen(false);\n      setEditExpense(null);\n      toast({\n        title: \"Success\",\n        description: \"Expense updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSort = (column: ExpenseSortBy) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(column);\n      setSortOrder('desc');\n    }\n    setCurrentPage(0);\n  };\n\n  const handleFilterChange = (key: keyof ExpenseFilters, value: string | number | undefined) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value === '' ? undefined : value,\n    }));\n    setCurrentPage(0);\n  };\n\n  const handleExportCSV = () => {\n    const params = new URLSearchParams({\n      ...(filters.search && { search: filters.search }),\n      ...(filters.categoryId && { categoryId: filters.categoryId }),\n      ...(filters.startDate && { startDate: filters.startDate }),\n      ...(filters.endDate && { endDate: filters.endDate }),\n      ...(filters.minAmount !== undefined && { minAmount: filters.minAmount.toString() }),\n      ...(filters.maxAmount !== undefined && { maxAmount: filters.maxAmount.toString() }),\n    });\n    \n    window.open(`/api/export/csv?${params.toString()}`, '_blank');\n    \n    toast({\n      title: \"Export Started\",\n      description: \"Your filtered expenses are being exported to CSV.\",\n    });\n  };\n\n  const expenses = expenseData?.expenses || [];\n  const totalCount = expenseData?.totalCount || 0;\n  const hasMore = expenseData?.hasMore || false;\n\n  const getSortIcon = (column: ExpenseSortBy) => {\n    if (sortBy !== column) return null;\n    return sortOrder === 'asc' ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />;\n  };\n\n  const getCategoryColor = (categoryId: string) => {\n    const category = categories.find((cat) => cat.id === categoryId);\n    return category?.color || '#6b7280';\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const formatTime = (date: string) => {\n    return new Date(date).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  return (\n    <>\n    <Card>\n      <CardHeader>\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n          <CardTitle data-testid=\"text-expenses-title\">{title}</CardTitle>\n          \n          {showFilters && (\n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 sm:items-center\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search expenses...\"\n                  className=\"pl-10\"\n                  value={filters.search || ''}\n                  onChange={(e) => handleFilterChange('search', e.target.value)}\n                  data-testid=\"input-search\"\n                />\n              </div>\n              \n              <Select value={filters.categoryId || 'all'} onValueChange={(value) => handleFilterChange('categoryId', value === 'all' ? '' : value)}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <div className=\"flex space-x-2\">\n                <Input\n                  type=\"date\"\n                  value={filters.startDate || ''}\n                  onChange={(e) => handleFilterChange('startDate', e.target.value)}\n                  placeholder=\"Start date\"\n                  data-testid=\"input-start-date\"\n                />\n                <Input\n                  type=\"date\"\n                  value={filters.endDate || ''}\n                  onChange={(e) => handleFilterChange('endDate', e.target.value)}\n                  placeholder=\"End date\"\n                  data-testid=\"input-end-date\"\n                />\n              </div>\n              \n              <Button \n                variant=\"outline\" \n                onClick={handleExportCSV}\n                className=\"whitespace-nowrap\"\n                data-testid=\"button-export-filtered\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Filtered\n              </Button>\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-muted/30\">\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex items-center space-x-1 hover:text-foreground p-0 h-auto\"\n                    onClick={() => handleSort('date')}\n                    data-testid=\"button-sort-date\"\n                  >\n                    <span>Date</span>\n                    {getSortIcon('date')}\n                  </Button>\n                </TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex items-center space-x-1 hover:text-foreground p-0 h-auto\"\n                    onClick={() => handleSort('amount')}\n                    data-testid=\"button-sort-amount\"\n                  >\n                    <span>Amount</span>\n                    {getSortIcon('amount')}\n                  </Button>\n                </TableHead>\n                <TableHead>Receipt</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8\">\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                      <span className=\"text-muted-foreground\">Loading expenses...</span>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : expenses.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8\">\n                    <div className=\"text-muted-foreground\">\n                      {Object.keys(filters).length > 0 ? \"No expenses found matching your filters\" : \"No expenses found\"}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                expenses.map((expense: any) => (\n                  <TableRow key={expense.id} className=\"hover:bg-muted/20 transition-colors\" data-testid={`row-expense-${expense.id}`}>\n                    <TableCell>\n                      <div className=\"text-sm font-medium text-foreground\" data-testid={`text-expense-date-${expense.id}`}>\n                        {formatDate(expense.date)}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\" data-testid={`text-expense-time-${expense.id}`}>\n                        {formatTime(expense.date)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm font-medium text-foreground\" data-testid={`text-expense-description-${expense.id}`}>\n                        {expense.description}\n                      </div>\n                      {expense.vendor && (\n                        <div className=\"text-xs text-muted-foreground\" data-testid={`text-expense-vendor-${expense.id}`}>\n                          {expense.vendor}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        style={{ backgroundColor: `${getCategoryColor(expense.categoryId)}20`, color: getCategoryColor(expense.categoryId) }}\n                        data-testid={`badge-category-${expense.id}`}\n                      >\n                        {expense.category?.name || 'Unknown Category'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm font-bold text-foreground\" data-testid={`text-expense-amount-${expense.id}`}>\n                        {formatCurrency(expense.amount)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {expense.receiptPath ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <Paperclip className=\"w-4 h-4 text-secondary\" />\n                          <a\n                            href={expense.receiptPath}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n                            data-testid={`link-receipt-${expense.id}`}\n                          >\n                            receipt\n                          </a>\n                        </div>\n                      ) : (\n                        <span className=\"text-xs text-muted-foreground\">No receipt</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => {\n                            setViewExpense(expense);\n                            setIsViewOpen(true);\n                          }}\n                          data-testid={`button-view-${expense.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => {\n                            setEditExpense(expense);\n                            setIsEditOpen(true);\n                          }}\n                          data-testid={`button-edit-${expense.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                          onClick={() => {\n                            const confirmed = window.confirm(`Are you sure you want to delete the expense \"${expense.description}\"?\\n\\nAmount: ${formatCurrency(expense.amount)}\\nThis action cannot be undone.`);\n                            if (confirmed) {\n                              deleteExpenseMutation.mutate(expense.id);\n                            }\n                          }}\n                          disabled={deleteExpenseMutation.isPending}\n                          data-testid={`button-delete-${expense.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        \n        {expenses.length > 0 && (\n          <div className=\"px-6 py-4 border-t border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing {currentPage * limit + 1} to {Math.min((currentPage + 1) * limit, totalCount)} of {totalCount} expenses\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  disabled={currentPage === 0}\n                  onClick={() => setCurrentPage(currentPage - 1)}\n                  data-testid=\"button-previous-page\"\n                >\n                  Previous\n                </Button>\n                <span className=\"text-sm px-3 py-1 bg-primary text-primary-foreground rounded\">\n                  {currentPage + 1}\n                </span>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  disabled={!hasMore}\n                  onClick={() => setCurrentPage(currentPage + 1)}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n\n    {/* View Expense Dialog */}\n    <Dialog open={isViewOpen} onOpenChange={setIsViewOpen}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Expense Details</DialogTitle>\n        </DialogHeader>\n        {viewExpense && (\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Description</Label>\n              <p className=\"text-sm\">{viewExpense.description}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Amount</Label>\n              <p className=\"text-lg font-semibold\">{formatCurrency(viewExpense.amount)}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Category</Label>\n              <div className=\"flex items-center space-x-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full\" \n                  style={{ backgroundColor: viewExpense.category.color }}\n                />\n                <p className=\"text-sm\">{viewExpense.category.name}</p>\n              </div>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Vendor</Label>\n              <p className=\"text-sm\">{viewExpense.vendor || 'N/A'}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Date</Label>\n              <p className=\"text-sm\">{formatDate(viewExpense.date)} at {formatTime(viewExpense.date)}</p>\n            </div>\n            {viewExpense.notes && (\n              <div>\n                <Label className=\"text-sm font-medium text-muted-foreground\">Notes</Label>\n                <p className=\"text-sm\">{viewExpense.notes}</p>\n              </div>\n            )}\n            {viewExpense.receiptPath && (\n              <div>\n                <Label className=\"text-sm font-medium text-muted-foreground\">Receipt</Label>\n                <a\n                  href={viewExpense.receiptPath}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-sm text-primary hover:underline\"\n                >\n                  View Receipt\n                </a>\n              </div>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n\n    {/* Edit Expense Dialog */}\n    <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Edit Expense</DialogTitle>\n        </DialogHeader>\n        {editExpense && (\n          <EditExpenseFormInline\n            expense={editExpense}\n            categories={categories}\n            onSubmit={(data: Partial<UpdateExpense>) => {\n              editExpenseMutation.mutate({ id: editExpense.id, expense: data });\n            }}\n            onCancel={() => {\n              setIsEditOpen(false);\n              setEditExpense(null);\n            }}\n            isLoading={editExpenseMutation.isPending}\n          />\n        )}\n      </DialogContent>\n    </Dialog>\n    </>\n  );\n}\n","size_bytes":30331},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        type=\"button\" \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2915},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { useAuthState } from \"@/hooks/useAuth\";\nimport fdesLogo from \"@assets/image_1758110732910.png\";\nimport { \n  Receipt, \n  BarChart3, \n  Plus, \n  List, \n  Tags, \n  Calendar, \n  Download, \n  Settings,\n  Menu,\n  X,\n  Users,\n  LogOut,\n  LogIn\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: BarChart3 },\n  { name: \"Add Expense\", href: \"/add-expense\", icon: Plus },\n  { name: \"All Expenses\", href: \"/expenses\", icon: List },\n  { name: \"Categories\", href: \"/categories\", icon: Tags },\n  { name: \"Expense Wallet\", href: \"/budget\", icon: Calendar },\n];\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport default function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n  const authState = useAuthState();\n  const { isAuthenticated, user, isAdmin } = authState;\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <button\n        className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-lg bg-card border border-border shadow-lg\"\n        onClick={() => setIsMobileOpen(!isMobileOpen)}\n        data-testid=\"button-mobile-menu\"\n      >\n        {isMobileOpen ? (\n          <X className=\"w-5 h-5 text-foreground\" />\n        ) : (\n          <Menu className=\"w-5 h-5 text-foreground\" />\n        )}\n      </button>\n\n      {/* Mobile overlay */}\n      {isMobileOpen && (\n        <div\n          className=\"md:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-40\"\n          onClick={() => setIsMobileOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          \"fixed md:static w-64 bg-card border-r border-border h-full z-50 transform transition-transform duration-300 ease-in-out\",\n          isMobileOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\",\n          className\n        )}\n        style={{ boxShadow: \"2px 0 8px rgba(0,0,0,0.1)\" }}\n      >\n        {/* Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={fdesLogo} \n              alt=\"FDES Logo\" \n              className=\"h-10 w-auto object-contain\"\n            />\n            <h1 className=\"text-lg font-semibold text-foreground\">Expense Tracker</h1>\n          </div>\n          \n          {/* User info */}\n          {isAuthenticated && user && (\n            <div className=\"mt-4 p-3 bg-accent/50 rounded-lg\">\n              <p className=\"text-sm font-medium text-foreground\">{user.name}</p>\n              <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n              {user.role === 'admin' && (\n                <span className=\"inline-block mt-1 px-2 py-1 text-xs bg-primary text-primary-foreground rounded\">\n                  Admin\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2\">\n          {!isAuthenticated ? (\n            <button\n              className=\"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors w-full\"\n              onClick={authState.login}\n              data-testid=\"button-login\"\n            >\n              <LogIn className=\"w-5 h-5\" />\n              <span>Sign In with Microsoft</span>\n            </button>\n          ) : (\n            <>\n              {navigation.map((item) => {\n                const isActive = location === item.href;\n                const Icon = item.icon;\n                \n                return (\n                  <Link \n                    key={item.name} \n                    href={item.href}\n                    className={cn(\n                      \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors\",\n                      isActive\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                    onClick={() => setIsMobileOpen(false)}\n                    data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span>{item.name}</span>\n                  </Link>\n                );\n              })}\n              \n              {/* Admin-only User Management */}\n              {isAdmin && (\n                <Link \n                  href=\"/user-management\"\n                  className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors\",\n                    location === \"/user-management\"\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                  )}\n                  onClick={() => setIsMobileOpen(false)}\n                  data-testid=\"link-user-management\"\n                >\n                  <Users className=\"w-5 h-5\" />\n                  <span>User Management</span>\n                </Link>\n              )}\n            </>\n          )}\n          \n          {isAuthenticated && (\n            <div className=\"pt-4 border-t border-border mt-4\">\n              <button\n                className=\"flex items-center space-x-3 px-4 py-3 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors w-full\"\n                onClick={() => {\n                  // Export CSV functionality\n                  const params = new URLSearchParams();\n                  window.open(`/api/export/csv?${params.toString()}`, '_blank');\n                }}\n                data-testid=\"button-export-data\"\n              >\n                <Download className=\"w-5 h-5\" />\n                <span>Export Data</span>\n              </button>\n              \n              <Link href=\"/settings\">\n                <button\n                  className=\"flex items-center space-x-3 px-4 py-3 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors w-full\"\n                  onClick={() => setIsMobileOpen(false)}\n                  data-testid=\"button-settings\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                  <span>Settings</span>\n                </button>\n              </Link>\n              \n              <button\n                className=\"flex items-center space-x-3 px-4 py-3 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors w-full\"\n                onClick={authState.logout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-5 h-5\" />\n                <span>Sign Out</span>\n              </button>\n            </div>\n          )}\n        </nav>\n      </div>\n    </>\n  );\n}\n","size_bytes":7012},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"export const MONTHS = [\n  \"January\",\n  \"February\", \n  \"March\",\n  \"April\",\n  \"May\", \n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\", \n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nexport const CURRENT_YEAR = new Date().getFullYear();\nexport const CURRENT_MONTH = new Date().getMonth() + 1;\n\nexport const DEFAULT_CATEGORY_COLORS = [\n  \"#3b82f6\", // blue\n  \"#10b981\", // green  \n  \"#f59e0b\", // yellow\n  \"#8b5cf6\", // purple\n  \"#ef4444\", // red\n  \"#06b6d4\", // cyan\n  \"#f97316\", // orange\n  \"#84cc16\", // lime\n  \"#ec4899\", // pink\n  \"#6b7280\", // gray\n];\n\nexport const EXPENSE_SORT_OPTIONS = [\n  { value: 'date', label: 'Date' },\n  { value: 'amount', label: 'Amount' },\n  { value: 'description', label: 'Description' },\n  { value: 'category', label: 'Category' },\n] as const;\n\nexport const DATE_FILTER_OPTIONS = [\n  { value: 'last-7-days', label: 'Last 7 days' },\n  { value: 'last-30-days', label: 'Last 30 days' }, \n  { value: 'this-month', label: 'This month' },\n  { value: 'last-month', label: 'Last month' },\n  { value: 'custom', label: 'Custom range' },\n] as const;\n\nexport const CHART_COLORS = {\n  primary: \"hsl(210 100% 44%)\",\n  secondary: \"hsl(183 100% 38%)\", \n  accent: \"hsl(42.0290 92.8251% 56.2745%)\",\n  success: \"hsl(147.1429 78.5047% 41.9608%)\",\n  destructive: \"hsl(356.3033 90.5579% 54.3137%)\",\n  muted: \"hsl(215.4 16.3% 46.9%)\",\n};\n\nexport const MAX_FILE_SIZE = 10485760; // 10MB\nexport const ALLOWED_FILE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];\n\nexport const PAGINATION_LIMITS = [10, 25, 50, 100] as const;\n","size_bytes":1546},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Format currency amount to display with proper formatting in Indian Rupees\n */\nexport function formatCurrency(amount: number | string): string {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(num);\n}\n\n/**\n * Format date to readable string\n */\nexport function formatDate(date: string | Date, options?: Intl.DateTimeFormatOptions): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric', \n    year: 'numeric',\n    ...options,\n  }).format(dateObj);\n}\n\n/**\n * Format time to readable string\n */\nexport function formatTime(date: string | Date): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true,\n  }).format(dateObj);\n}\n\n/**\n * Get percentage with proper formatting\n */\nexport function formatPercentage(value: number, decimals: number = 1): string {\n  return `${value.toFixed(decimals)}%`;\n}\n\n/**\n * Debounce function for search inputs\n */\nexport function debounce<T extends (...args: any[]) => void>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * Generate a random color from a predefined palette\n */\nexport function getRandomColor(): string {\n  const colors = [\n    '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444',\n    '#06b6d4', '#f97316', '#84cc16', '#ec4899', '#6b7280'\n  ];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\n/**\n * Validate file type and size for uploads\n */\nexport function validateFile(file: File, maxSize: number = 10485760): { isValid: boolean; error?: string } {\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];\n  \n  if (!allowedTypes.includes(file.type)) {\n    return { isValid: false, error: 'Invalid file type. Please upload JPG, PNG, or PDF files only.' };\n  }\n  \n  if (file.size > maxSize) {\n    const maxSizeMB = maxSize / (1024 * 1024);\n    return { isValid: false, error: `File size too large. Maximum size is ${maxSizeMB}MB.` };\n  }\n  \n  return { isValid: true };\n}\n\n/**\n * Calculate days remaining in current month\n */\nexport function getDaysLeftInMonth(): number {\n  const now = new Date();\n  const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n  return lastDayOfMonth.getDate() - now.getDate();\n}\n\n/**\n * Get start and end dates for common date ranges\n */\nexport function getDateRange(range: string): { startDate?: string; endDate?: string } {\n  const now = new Date();\n  const today = now.toISOString().split('T')[0];\n  \n  switch (range) {\n    case 'last-7-days':\n      const sevenDaysAgo = new Date(now);\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      return { startDate: sevenDaysAgo.toISOString().split('T')[0], endDate: today };\n      \n    case 'last-30-days':\n      const thirtyDaysAgo = new Date(now);\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      return { startDate: thirtyDaysAgo.toISOString().split('T')[0], endDate: today };\n      \n    case 'this-month':\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      return { startDate: startOfMonth.toISOString().split('T')[0], endDate: today };\n      \n    case 'last-month':\n      const startOfLastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n      const endOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0);\n      return { \n        startDate: startOfLastMonth.toISOString().split('T')[0], \n        endDate: endOfLastMonth.toISOString().split('T')[0] \n      };\n      \n    default:\n      return {};\n  }\n}\n\n/**\n * Safe number parsing with fallback\n */\nexport function safeParseFloat(value: string | number, fallback: number = 0): number {\n  if (typeof value === 'number') return value;\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? fallback : parsed;\n}\n\n/**\n * Truncate text with ellipsis\n */\nexport function truncate(text: string, length: number = 50): string {\n  if (text.length <= length) return text;\n  return text.slice(0, length) + '...';\n}\n","size_bytes":4589},"client/src/pages/AddExpense.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport Sidebar from \"@/components/Sidebar\";\nimport ExpenseForm from \"@/components/ExpenseForm\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function AddExpense() {\n  const [, setLocation] = useLocation();\n\n  const handleCancel = () => {\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"md:ml-0 ml-16\">\n                <div className=\"flex items-center space-x-4\">\n                  <Link href=\"/\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back to Dashboard\n                    </Button>\n                  </Link>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">Add Expense</h2>\n                    <p className=\"text-muted-foreground\">Create a new expense entry</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n        \n        <main className=\"p-6\">\n          <ExpenseForm \n            onSuccess={() => {\n              setLocation('/');\n            }}\n            onCancel={handleCancel}\n          />\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1685},"client/src/pages/AllExpenses.tsx":{"content":"import { Link } from \"wouter\";\nimport Sidebar from \"@/components/Sidebar\";\nimport ExpenseTable from \"@/components/ExpenseTable\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Plus } from \"lucide-react\";\n\nexport default function AllExpenses() {\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"md:ml-0 ml-16\">\n                <div className=\"flex items-center space-x-4\">\n                  <Link href=\"/\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back to Dashboard\n                    </Button>\n                  </Link>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">All Expenses</h2>\n                    <p className=\"text-muted-foreground\">View and manage all expense entries</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <Link href=\"/add-expense\">\n              <Button data-testid=\"button-add-expense\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Expense\n              </Button>\n            </Link>\n          </div>\n        </header>\n        \n        <main className=\"p-6\">\n          <ExpenseTable \n            title=\"All Expenses\" \n            showFilters={true}\n            limit={50}\n          />\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1795},"client/src/pages/Categories.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCategorySchema, type InsertCategory } from \"@shared/schema\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Plus, Edit, Trash2, Loader2 } from \"lucide-react\";\n\nconst PRESET_COLORS = [\n  \"#3b82f6\", // blue\n  \"#10b981\", // green\n  \"#f59e0b\", // yellow\n  \"#8b5cf6\", // purple\n  \"#ef4444\", // red\n  \"#06b6d4\", // cyan\n  \"#f97316\", // orange\n  \"#84cc16\", // lime\n  \"#ec4899\", // pink\n  \"#6b7280\", // gray\n];\n\nexport default function Categories() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n\n  const form = useForm<InsertCategory>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      color: PRESET_COLORS[0],\n      description: \"\",\n    },\n  });\n\n  // Fetch categories\n  const { data: categories = [], isLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Create category mutation\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      const response = await apiRequest(\"POST\", \"/api/categories\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update category mutation\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertCategory> }) => {\n      const response = await apiRequest(\"PUT\", `/api/categories/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\",\n      });\n      form.reset();\n      setEditingCategory(null);\n      setIsDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete category mutation\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertCategory) => {\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data });\n    } else {\n      createCategoryMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (category: any) => {\n    setEditingCategory(category);\n    form.reset({\n      name: category.name,\n      color: category.color,\n      description: category.description || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this category?\")) {\n      deleteCategoryMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    form.reset({\n      name: \"\",\n      color: PRESET_COLORS[0],\n      description: \"\",\n    });\n    setEditingCategory(null);\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"md:ml-0 ml-16\">\n                <div className=\"flex items-center space-x-4\">\n                  <Link href=\"/\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back to Dashboard\n                    </Button>\n                  </Link>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">Categories</h2>\n                    <p className=\"text-muted-foreground\">Manage expense categories</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <Dialog open={isDialogOpen} onOpenChange={(open) => {\n              setIsDialogOpen(open);\n              if (!open) resetForm();\n            }}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-category\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Category\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingCategory ? \"Edit Category\" : \"Add New Category\"}\n                  </DialogTitle>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter category name\"\n                              {...field}\n                              data-testid=\"input-category-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"color\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Color</FormLabel>\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            {PRESET_COLORS.map((color) => (\n                              <button\n                                key={color}\n                                type=\"button\"\n                                className={`w-8 h-8 rounded-full border-2 ${\n                                  field.value === color ? 'border-foreground' : 'border-border'\n                                }`}\n                                style={{ backgroundColor: color }}\n                                onClick={() => field.onChange(color)}\n                                data-testid={`button-color-${color}`}\n                              />\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Enter category description\"\n                              {...field}\n                              data-testid=\"textarea-category-description\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex items-center justify-end space-x-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsDialogOpen(false);\n                          resetForm();\n                        }}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createCategoryMutation.isPending || updateCategoryMutation.isPending}\n                        data-testid=\"button-save-category\"\n                      >\n                        {(createCategoryMutation.isPending || updateCategoryMutation.isPending) && (\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        )}\n                        {editingCategory ? \"Update\" : \"Create\"} Category\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </header>\n        \n        <main className=\"p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-categories-title\">All Categories</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-muted-foreground\">Loading categories...</span>\n                  </div>\n                </div>\n              ) : categories.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-muted-foreground\">\n                    <div className=\"text-4xl mb-2\">📂</div>\n                    <p>No categories found</p>\n                    <p className=\"text-xs\">Create your first category to get started</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {categories.map((category: any) => (\n                    <Card key={category.id} className=\"transition-all hover:shadow-md\" data-testid={`card-category-${category.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div\n                              className=\"w-4 h-4 rounded-full\"\n                              style={{ backgroundColor: category.color }}\n                            />\n                            <h3 className=\"font-medium text-foreground\" data-testid={`text-category-name-${category.id}`}>\n                              {category.name}\n                            </h3>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0\"\n                              onClick={() => handleEdit(category)}\n                              data-testid={`button-edit-${category.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                              onClick={() => handleDelete(category.id)}\n                              disabled={deleteCategoryMutation.isPending}\n                              data-testid={`button-delete-${category.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        {category.description && (\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`text-category-description-${category.id}`}>\n                            {category.description}\n                          </p>\n                        )}\n                        <Badge \n                          variant=\"secondary\" \n                          className=\"mt-2\"\n                          style={{ backgroundColor: `${category.color}20`, color: category.color }}\n                        >\n                          Active\n                        </Badge>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14066},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/Sidebar\";\nimport BudgetCards from \"@/components/BudgetCards\";\nimport ExpenseCharts from \"@/components/ExpenseCharts\";\nimport ExpenseTable from \"@/components/ExpenseTable\";\nimport MonthYearSelector from \"@/components/MonthYearSelector\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Plus, Download, Tags, Bell, User, Calendar } from \"lucide-react\";\nimport ExcelImport from \"@/components/ExcelImport\";\nimport { formatCurrency } from \"@/lib/utils\";\n\nexport default function Dashboard() {\n  const currentDate = new Date();\n  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear());\n\n  const handleMonthYearChange = (month: number, year: number) => {\n    setSelectedMonth(month);\n    setSelectedYear(year);\n  };\n\n  // Fetch budget summary for progress display\n  const { data: budgetSummary } = useQuery({\n    queryKey: [\"/api/analytics/budget-summary\", selectedMonth, selectedYear],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/budget-summary/${selectedMonth}/${selectedYear}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  // Fetch category breakdown for category summary\n  const { data: categoryData } = useQuery({\n    queryKey: [\"/api/analytics/category-breakdown\", selectedMonth, selectedYear],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append('month', selectedMonth.toString());\n      params.append('year', selectedYear.toString());\n      \n      const response = await fetch(`/api/analytics/category-breakdown?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  const handleExportCSV = () => {\n    const params = new URLSearchParams();\n    window.open(`/api/export/csv?${params.toString()}`, '_blank');\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"md:ml-0 ml-16\"> {/* Offset for mobile menu button */}\n                <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">Dashboard</h2>\n                <p className=\"text-muted-foreground\">Welcome back, Accounting Manager</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"hidden md:flex\">\n                <MonthYearSelector\n                  selectedMonth={selectedMonth}\n                  selectedYear={selectedYear}\n                  onMonthYearChange={handleMonthYearChange}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        \n        {/* Dashboard Content */}\n        <main className=\"p-6 space-y-6\">\n          {/* Wallet Overview Cards */}\n          <BudgetCards month={selectedMonth} year={selectedYear} />\n          \n          {/* Monthly Tracking and Category Breakdown */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Budget Progress */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Monthly Expense Tracking</CardTitle>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"text-budget-usage\">\n                      {budgetSummary ? `${(budgetSummary.percentageUsed || 0).toFixed(1)}% of wallet used this month` : \"Loading... \"}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {budgetSummary && (\n                    <>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-2\">\n                          <span className=\"text-muted-foreground\">Monthly Usage</span>\n                          <span className=\"font-medium text-foreground\" data-testid=\"text-progress-amount\">\n                            {formatCurrency(budgetSummary.totalExpenses)} from {formatCurrency(budgetSummary.walletAmount)} wallet\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-muted rounded-full h-3\">\n                          <div \n                            className=\"h-3 rounded-full bg-gradient-to-r from-secondary to-primary transition-all duration-300\"\n                            style={{ width: `${Math.min(budgetSummary.percentageUsed || 0, 100)}%` }}\n                            data-testid=\"progress-expense-bar\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-4 pt-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-daily-average\">\n                            {formatCurrency(budgetSummary.dailyAverage)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Daily Average</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-projected-spend\">\n                            {formatCurrency(budgetSummary.projectedTotal)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Projected Total</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-days-left\">\n                            {budgetSummary.daysLeft}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Days Left</div>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Category Summary */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Category Trends</CardTitle>\n                  <div className=\"text-sm text-muted-foreground\" data-testid=\"text-category-count\">\n                    {categoryData ? `${categoryData.length} categories this month` : \"Loading...\"}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {categoryData && categoryData.length > 0 ? (\n                  <>\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span className=\"text-muted-foreground\">Top Category</span>\n                        <span className=\"font-medium text-foreground\" data-testid=\"text-top-category\">\n                          {categoryData[0]?.name || \"No expenses\"}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-3\">\n                        <div \n                          className=\"h-3 rounded-full bg-gradient-to-r from-secondary to-primary transition-all duration-300\"\n                          style={{ width: `${categoryData[0]?.percentage || 0}%` }}\n                          data-testid=\"progress-category-bar\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-3 gap-4 pt-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-top-amount\">\n                          {formatCurrency(categoryData[0]?.totalAmount || 0)}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Top Spend</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-avg-category\">\n                          {formatCurrency(\n                            categoryData.length > 0 \n                              ? categoryData.reduce((sum: number, cat: any) => sum + cat.totalAmount, 0) / categoryData.length \n                              : 0\n                          )}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Avg per Category</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-categories-used\">\n                          {categoryData.filter((cat: any) => cat.totalAmount > 0).length}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Active Categories</div>\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"text-muted-foreground\">No category data available</div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Charts and Category Breakdown */}\n          <ExpenseCharts month={selectedMonth} year={selectedYear} />\n          \n          {/* Recent Expenses */}\n          <ExpenseTable \n            limit={10} \n            title=\"Recent Expenses\"\n            showFilters={false}\n          />\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10511},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Settings.tsx":{"content":"import Sidebar from \"@/components/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Bell, FileText, Download, Trash2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [notifications, setNotifications] = useState(true);\n  const [emailNotifications, setEmailNotifications] = useState(false);\n  const [currency, setCurrency] = useState(\"INR\");\n  const [dateFormat, setDateFormat] = useState(\"DD/MM/YYYY\");\n\n  const handleSaveSettings = () => {\n    // For now, just show a success message\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your preferences have been updated successfully.\",\n    });\n  };\n\n  const handleExportData = () => {\n    // Export functionality\n    const params = new URLSearchParams();\n    window.open(`/api/export/csv?${params.toString()}`, '_blank');\n    toast({\n      title: \"Export Started\",\n      description: \"Your data export will download shortly.\",\n    });\n  };\n\n  const handleClearData = () => {\n    const confirmed = window.confirm(\n      \"Are you sure you want to clear all data?\\n\\nThis will permanently delete:\\n- All expenses\\n- All categories\\n- All budgets\\n\\nThis action cannot be undone.\"\n    );\n    \n    if (confirmed) {\n      toast({\n        title: \"Data Cleared\",\n        description: \"All application data has been cleared. This is a demo action.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"md:ml-0 ml-16\">\n                <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">Settings</h2>\n                <p className=\"text-muted-foreground\">Manage your application preferences</p>\n              </div>\n            </div>\n          </div>\n        </header>\n        \n        {/* Settings Content */}\n        <main className=\"p-6 space-y-6\">\n          {/* Account Settings */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <User className=\"w-5 h-5 text-primary\" />\n                <CardTitle>Account Settings</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    placeholder=\"Accounting Manager\"\n                    value=\"Accounting Manager\"\n                    data-testid=\"input-username\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"manager@company.com\"\n                    value=\"manager@company.com\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notification Settings */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Bell className=\"w-5 h-5 text-primary\" />\n                <CardTitle>Notifications</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-base\">Push Notifications</Label>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Get notified about budget alerts and expense reminders\n                  </div>\n                </div>\n                <Switch\n                  checked={notifications}\n                  onCheckedChange={setNotifications}\n                  data-testid=\"switch-notifications\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-base\">Email Notifications</Label>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Receive weekly expense summaries via email\n                  </div>\n                </div>\n                <Switch\n                  checked={emailNotifications}\n                  onCheckedChange={setEmailNotifications}\n                  data-testid=\"switch-email-notifications\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Display Settings */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5 text-primary\" />\n                <CardTitle>Display Preferences</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label>Currency</Label>\n                  <Select value={currency} onValueChange={setCurrency}>\n                    <SelectTrigger data-testid=\"select-currency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"INR\">Indian Rupee (₹)</SelectItem>\n                      <SelectItem value=\"USD\">US Dollar ($)</SelectItem>\n                      <SelectItem value=\"EUR\">Euro (€)</SelectItem>\n                      <SelectItem value=\"GBP\">British Pound (£)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Date Format</Label>\n                  <Select value={dateFormat} onValueChange={setDateFormat}>\n                    <SelectTrigger data-testid=\"select-date-format\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Data Management */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Download className=\"w-5 h-5 text-primary\" />\n                <CardTitle>Data Management</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button\n                  onClick={handleExportData}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-export-data\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                  <span>Export All Data</span>\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleClearData}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-clear-data\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                  <span>Clear All Data</span>\n                </Button>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Export your data as CSV or permanently delete all application data.\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Settings */}\n          <div className=\"flex justify-end\">\n            <Button\n              onClick={handleSaveSettings}\n              className=\"px-8\"\n              data-testid=\"button-save-settings\"\n            >\n              Save Settings\n            </Button>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":9038},"client/src/pages/ExpenseWalletSetup.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertExpenseWalletSchema, type InsertExpenseWallet, type ExpenseWallet } from \"@shared/schema\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Plus, Loader2, Target, Edit } from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function ExpenseWalletSetup() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingWallet, setEditingWallet] = useState<ExpenseWallet | null>(null);\n\n  const currentDate = new Date();\n  const form = useForm({\n    resolver: zodResolver(insertExpenseWalletSchema),\n    defaultValues: {\n      amount: \"\",\n      description: \"\",\n      date: currentDate.toISOString().split('T')[0], // YYYY-MM-DD format\n    },\n  });\n\n  // Fetch current expense wallet\n  const { data: currentWallet, isLoading } = useQuery<ExpenseWallet>({\n    queryKey: [\"/api/current-expense-wallet\"],\n  });\n\n  // Fetch all expense wallets for history\n  const { data: expenseWallets = [] } = useQuery<ExpenseWallet[]>({\n    queryKey: [\"/api/expense-wallets\"],\n  });\n\n  // Add expense wallet balance mutation\n  const addBalanceMutation = useMutation({\n    mutationFn: async (data: InsertExpenseWallet) => {\n      // Always create a new wallet entry to maintain records\n      return await apiRequest(\"POST\", \"/api/expense-wallets\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/current-expense-wallet\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-wallets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/wallet-summary\"] });\n      \n      toast({\n        title: \"Success!\",\n        description: \"Balance added to expense wallet successfully\",\n      });\n      \n      form.reset();\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save expense wallet. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error saving expense wallet:\", error);\n    },\n  });\n\n  // Update expense wallet mutation\n  const updateWalletMutation = useMutation({\n    mutationFn: async (data: { id: string; wallet: Partial<InsertExpenseWallet> }) => {\n      return await apiRequest(\"PUT\", `/api/expense-wallets/${data.id}`, data.wallet);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/current-expense-wallet\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-wallets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/wallet-summary\"] });\n      \n      toast({\n        title: \"Success!\",\n        description: \"Wallet entry updated successfully\",\n      });\n      \n      form.reset();\n      setIsEditing(false);\n      setEditingWallet(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wallet entry. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error updating wallet entry:\", error);\n    },\n  });\n\n  const onSubmit = (values: any) => {\n    if (editingWallet) {\n      updateWalletMutation.mutate({ id: editingWallet.id, wallet: values });\n    } else {\n      addBalanceMutation.mutate(values);\n    }\n  };\n\n  const handleEditWalletEntry = (wallet: ExpenseWallet) => {\n    setEditingWallet(wallet);\n    form.setValue(\"amount\", String(wallet.amount));\n    form.setValue(\"description\", wallet.description || \"\");\n    form.setValue(\"date\", new Date(wallet.date).toISOString().split('T')[0]);\n    setIsEditing(true);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditingWallet(null);\n    form.reset();\n  };\n\n  const handleEdit = () => {\n    if (currentWallet) {\n      form.setValue(\"amount\", String(currentWallet.amount));\n      form.setValue(\"description\", currentWallet.description || \"\");\n      form.setValue(\"date\", new Date(currentWallet.date).toISOString().split('T')[0]);\n      setIsEditing(true);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\" data-testid=\"button-back\">\n                  <ArrowLeft className=\"w-4 h-4\" />\n                </Button>\n              </Link>\n              \n              <div className=\"md:ml-0 ml-2\">\n                <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">Expense Wallet</h2>\n                <p className=\"text-muted-foreground\">Add balance to your expense wallet</p>\n              </div>\n            </div>\n          </div>\n        </header>\n        \n        {/* Content */}\n        <main className=\"p-6 space-y-6\">\n          {/* Current Expense Wallet Display */}\n          {currentWallet && !isEditing && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Target className=\"w-5 h-5 text-primary\" />\n                    <CardTitle>Total Wallet Balance</CardTitle>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-2xl text-muted-foreground\">₹</span>\n                    <span className=\"text-3xl font-bold text-foreground\" data-testid=\"text-current-wallet-amount\">\n                      {expenseWallets.reduce((total, wallet) => total + parseFloat(wallet.amount), 0).toLocaleString('en-IN')}\n                    </span>\n                  </div>\n                  {currentWallet.description && (\n                    <p className=\"text-muted-foreground\" data-testid=\"text-current-wallet-description\">\n                      {currentWallet.description}\n                    </p>\n                  )}\n                  <div className=\"text-sm text-muted-foreground\">\n                    Total from {expenseWallets.length} balance {expenseWallets.length === 1 ? 'entry' : 'entries'}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Add Balance Form */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Plus className=\"w-5 h-5 text-primary\" />\n                <CardTitle>{currentWallet ? \"Add Balance to Wallet\" : \"Set Initial Wallet Balance\"}</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {currentWallet \n                    ? \"Add funds to your expense wallet. Each addition will be recorded for tracking purposes.\" \n                    : \"Set the initial balance for your expense wallet to get started.\"\n                  }\n                </p>\n              </div>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Wallet Amount (₹)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"10000.00\"\n                              {...field}\n                              data-testid=\"input-wallet-amount\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"date\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Effective Date</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              {...field}\n                              data-testid=\"input-wallet-date\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"e.g., Initial wallet setup\"\n                              className=\"resize-none\"\n                              {...field}\n                              value={field.value || \"\"}\n                              data-testid=\"input-wallet-description\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex space-x-3\">\n                      <Button \n                        type=\"submit\" \n                        disabled={addBalanceMutation.isPending || updateWalletMutation.isPending}\n                        data-testid=\"button-save-wallet\"\n                      >\n                        {(addBalanceMutation.isPending || updateWalletMutation.isPending) && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                        {editingWallet ? \"Update Entry\" : currentWallet ? \"Add Balance\" : \"Set Initial Balance\"}\n                      </Button>\n\n                      {editingWallet && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={handleCancelEdit}\n                          data-testid=\"button-cancel-edit\"\n                        >\n                          Cancel\n                        </Button>\n                      )}\n\n                    </div>\n                  </form>\n                </Form>\n            </CardContent>\n          </Card>\n\n          {/* Balance Additions History */}\n          {expenseWallets.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Balance Addition History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {expenseWallets\n                    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                    .slice(0, 10) // Show last 10 additions\n                    .map((wallet) => (\n                      <div\n                        key={wallet.id}\n                        className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                        data-testid={`item-previous-wallet-${wallet.id}`}\n                      >\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-lg text-muted-foreground\">₹</span>\n                            <span className=\"font-medium text-foreground\">\n                              {parseFloat(wallet.amount).toLocaleString('en-IN')}\n                            </span>\n                          </div>\n                          {wallet.description && (\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              {wallet.description}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditWalletEntry(wallet)}\n                            data-testid={`button-edit-wallet-${wallet.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              {new Date(wallet.date).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Added: {new Date(wallet.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {isLoading && (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin\" />\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14412},"client/src/components/MonthYearSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { MONTHS } from \"@/lib/constants\";\n\ninterface MonthYearSelectorProps {\n  selectedMonth: number;\n  selectedYear: number;\n  onMonthYearChange: (month: number, year: number) => void;\n}\n\nexport default function MonthYearSelector({\n  selectedMonth,\n  selectedYear,\n  onMonthYearChange,\n}: MonthYearSelectorProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const currentDate = new Date();\n  const currentMonth = currentDate.getMonth() + 1;\n  const currentYear = currentDate.getFullYear();\n\n  const goToPreviousMonth = () => {\n    if (selectedMonth === 1) {\n      onMonthYearChange(12, selectedYear - 1);\n    } else {\n      onMonthYearChange(selectedMonth - 1, selectedYear);\n    }\n  };\n\n  const goToNextMonth = () => {\n    if (selectedMonth === 12) {\n      onMonthYearChange(1, selectedYear + 1);\n    } else {\n      onMonthYearChange(selectedMonth + 1, selectedYear);\n    }\n  };\n\n  const goToCurrentMonth = () => {\n    onMonthYearChange(currentMonth, currentYear);\n  };\n\n  const handleMonthChange = (month: string) => {\n    onMonthYearChange(parseInt(month), selectedYear);\n  };\n\n  const handleYearChange = (year: string) => {\n    onMonthYearChange(selectedMonth, parseInt(year));\n  };\n\n  // Generate year options (current year ± 5 years)\n  const years = [];\n  for (let year = currentYear - 5; year <= currentYear + 1; year++) {\n    years.push(year);\n  }\n\n  const isCurrentMonth = selectedMonth === currentMonth && selectedYear === currentYear;\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      {/* Navigation arrows */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={goToPreviousMonth}\n        className=\"p-1 h-8 w-8\"\n        data-testid=\"button-previous-month\"\n      >\n        <ChevronLeft className=\"w-4 h-4\" />\n      </Button>\n\n      {/* Month Year Display/Selector */}\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex items-center space-x-2 bg-accent px-3 py-2 rounded-lg hover:bg-accent/80\"\n            data-testid=\"button-month-year-selector\"\n          >\n            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium\" data-testid=\"text-selected-month\">\n              {MONTHS[selectedMonth - 1]} {selectedYear}\n            </span>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-80 p-4\" align=\"end\">\n          <div className=\"space-y-4\">\n            <div className=\"text-sm font-medium\">Select Month & Year</div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <label className=\"text-xs text-muted-foreground mb-1 block\">Month</label>\n                <Select value={selectedMonth.toString()} onValueChange={handleMonthChange}>\n                  <SelectTrigger data-testid=\"select-month\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {MONTHS.map((month, index) => (\n                      <SelectItem key={index} value={(index + 1).toString()}>\n                        {month}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"text-xs text-muted-foreground mb-1 block\">Year</label>\n                <Select value={selectedYear.toString()} onValueChange={handleYearChange}>\n                  <SelectTrigger data-testid=\"select-year\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {years.map((year) => (\n                      <SelectItem key={year} value={year.toString()}>\n                        {year}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex justify-between pt-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToCurrentMonth}\n                disabled={isCurrentMonth}\n                data-testid=\"button-current-month\"\n              >\n                Current Month\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                data-testid=\"button-close-selector\"\n              >\n                Done\n              </Button>\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n\n      {/* Next month arrow */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={goToNextMonth}\n        className=\"p-1 h-8 w-8\"\n        data-testid=\"button-next-month\"\n      >\n        <ChevronRight className=\"w-4 h-4\" />\n      </Button>\n    </div>\n  );\n}","size_bytes":5265},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"client/src/components/ExcelImport.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileSpreadsheet, Loader2, CheckCircle, XCircle } from \"lucide-react\";\n\ninterface ImportResults {\n  total: number;\n  successful: number;\n  failed: number;\n  errors: string[];\n}\n\nexport default function ExcelImport() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importResults, setImportResults] = useState<ImportResults | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      // First, move the file to the server-accessible location\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // For now, we'll use the already uploaded file path\n      // In a real application, you'd upload the file to the server first\n      const filePath = \"attached_assets/ExpensesDataWithCategories_1757399520442.xlsx\";\n      \n      const response = await apiRequest(\"POST\", \"/api/expenses/import-excel\", { \n        filePath \n      });\n      return response.json();\n    },\n    onSuccess: (results: ImportResults) => {\n      setImportResults(results);\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      \n      if (results.successful > 0) {\n        toast({\n          title: \"Import Successful\",\n          description: `Successfully imported ${results.successful} expense${results.successful !== 1 ? 's' : ''}${results.failed > 0 ? `, ${results.failed} failed` : ''}`,\n        });\n      } else {\n        toast({\n          title: \"Import Failed\",\n          description: \"No expenses were imported successfully\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Import Error\",\n        description: \"Failed to import Excel file\",\n        variant: \"destructive\",\n      });\n      console.error(\"Import error:\", error);\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      setImportResults(null);\n    }\n  };\n\n  const handleImport = () => {\n    if (selectedFile) {\n      importMutation.mutate(selectedFile);\n    }\n  };\n\n  const resetDialog = () => {\n    setSelectedFile(null);\n    setImportResults(null);\n    setIsDialogOpen(false);\n  };\n\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className=\"flex items-center space-x-2\"\n          data-testid=\"button-import-excel\"\n        >\n          <FileSpreadsheet className=\"w-4 h-4\" />\n          <span>Import Excel</span>\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Import Expenses from Excel</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-6\">\n          {!importResults && (\n            <>\n              <div>\n                <Label htmlFor=\"excel-file\">Select Excel File</Label>\n                <div className=\"mt-2\">\n                  <Input\n                    id=\"excel-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={handleFileSelect}\n                    data-testid=\"input-excel-file\"\n                  />\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Supports .xlsx and .xls files with expense data\n                </p>\n              </div>\n\n              {selectedFile && (\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <FileSpreadsheet className=\"w-8 h-8 text-green-600\" />\n                      <div>\n                        <p className=\"font-medium text-sm\">{selectedFile.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {(selectedFile.size / 1024).toFixed(1)} KB\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <div className=\"flex justify-end space-x-3\">\n                <Button variant=\"outline\" onClick={resetDialog}>\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleImport}\n                  disabled={!selectedFile || importMutation.isPending}\n                  data-testid=\"button-start-import\"\n                >\n                  {importMutation.isPending && (\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  )}\n                  Import Expenses\n                </Button>\n              </div>\n            </>\n          )}\n\n          {importResults && (\n            <div className=\"space-y-4\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg\">Import Results</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Total rows processed:</span>\n                    <span className=\"font-medium\">{importResults.total}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm\">Successful:</span>\n                    </div>\n                    <span className=\"font-medium text-green-600\">{importResults.successful}</span>\n                  </div>\n\n                  {importResults.failed > 0 && (\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <XCircle className=\"w-4 h-4 text-red-600\" />\n                        <span className=\"text-sm\">Failed:</span>\n                      </div>\n                      <span className=\"font-medium text-red-600\">{importResults.failed}</span>\n                    </div>\n                  )}\n\n                  {importResults.errors.length > 0 && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm font-medium text-muted-foreground mb-2\">Errors:</p>\n                      <div className=\"bg-muted p-3 rounded-md max-h-32 overflow-y-auto\">\n                        {importResults.errors.map((error, index) => (\n                          <p key={index} className=\"text-xs text-red-600\">{error}</p>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Button onClick={resetDialog} className=\"w-full\">\n                Close\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7793},"server/excelImport.ts":{"content":"import XLSX from 'xlsx';\nimport path from 'path';\nimport { storage } from './storage';\nimport { insertExpenseSchema, type Category } from '@shared/schema';\n\nexport interface ExcelExpenseRow {\n  date?: string;\n  description?: string;\n  amount?: string | number;\n  category?: string;\n  vendor?: string;\n  notes?: string;\n  receiptPath?: string;\n}\n\nexport async function parseExcelFile(filePath: string) {\n  try {\n    // Read the Excel file\n    const workbook = XLSX.readFile(filePath);\n    const sheetName = workbook.SheetNames[0]; // Use first sheet\n    const worksheet = workbook.Sheets[sheetName];\n    \n    // Convert to JSON\n    const rawData: any[] = XLSX.utils.sheet_to_json(worksheet);\n    \n    console.log('Raw Excel data:', rawData);\n    console.log('Sample row:', rawData[0]);\n    \n    return rawData;\n  } catch (error) {\n    console.error('Error parsing Excel file:', error);\n    throw new Error('Failed to parse Excel file');\n  }\n}\n\nexport async function mapExcelRowToExpense(row: any, categories: Category[]): Promise<any> {\n  // Map common column names to our schema\n  const mappings: Record<string, string[]> = {\n    date: ['date', 'Date', 'DATE', 'expense_date', 'Expense Date'],\n    description: ['description', 'Description', 'DESCRIPTION', 'expense_description', 'Expense Description', 'item', 'Item'],\n    amount: ['amount', 'Amount', 'AMOUNT', 'expense_amount', 'Expense Amount', 'cost', 'Cost', 'price', 'Price'],\n    category: ['category', 'Category', 'CATEGORY', 'expense_category', 'Expense Category', 'type', 'Type'],\n    vendor: ['vendor', 'Vendor', 'VENDOR', 'supplier', 'Supplier', 'merchant', 'Merchant'],\n    notes: ['notes', 'Notes', 'NOTES', 'comments', 'Comments', 'remarks', 'Remarks']\n  };\n\n  const mappedData: any = {};\n  \n  // Find and map each field\n  for (const [field, possibleKeys] of Object.entries(mappings)) {\n    for (const key of possibleKeys) {\n      if (row[key] !== undefined && row[key] !== null && row[key] !== '') {\n        mappedData[field] = row[key];\n        break;\n      }\n    }\n  }\n\n  // Process date\n  if (mappedData.date) {\n    try {\n      // Handle Excel date numbers or text dates\n      let dateValue;\n      if (typeof mappedData.date === 'number') {\n        // Excel date number\n        const excelDate = new Date((mappedData.date - 25569) * 86400 * 1000);\n        dateValue = excelDate.toISOString().split('T')[0];\n      } else {\n        // Text date\n        const date = new Date(mappedData.date);\n        dateValue = date.toISOString().split('T')[0];\n      }\n      mappedData.date = dateValue;\n    } catch (error) {\n      mappedData.date = new Date().toISOString().split('T')[0];\n    }\n  } else {\n    mappedData.date = new Date().toISOString().split('T')[0];\n  }\n\n  // Process amount\n  if (mappedData.amount) {\n    const amountStr = String(mappedData.amount).replace(/[₹,\\s]/g, '');\n    mappedData.amount = amountStr;\n  }\n\n  // Map category name to category ID\n  if (mappedData.category) {\n    const categoryName = String(mappedData.category).trim();\n    const matchedCategory = categories.find(cat => \n      cat.name.toLowerCase() === categoryName.toLowerCase()\n    );\n    \n    if (matchedCategory) {\n      mappedData.categoryId = matchedCategory.id;\n    } else {\n      // Create new category if it doesn't exist\n      try {\n        const newCategory = await storage.createCategory({ name: categoryName });\n        mappedData.categoryId = newCategory.id;\n        categories.push(newCategory); // Add to categories list for next iterations\n      } catch (error) {\n        console.error('Failed to create category:', categoryName, error);\n        // Use first available category as fallback\n        mappedData.categoryId = categories[0]?.id;\n      }\n    }\n  } else {\n    // Use first available category as fallback\n    mappedData.categoryId = categories[0]?.id;\n  }\n\n  // Ensure required fields\n  if (!mappedData.description) {\n    mappedData.description = 'Imported expense';\n  }\n  \n  if (!mappedData.amount) {\n    mappedData.amount = '0';\n  }\n\n  return mappedData;\n}\n\nexport async function importExpensesFromExcel(filePath: string) {\n  try {\n    // Parse Excel file\n    const rawData = await parseExcelFile(filePath);\n    \n    if (!rawData || rawData.length === 0) {\n      throw new Error('No data found in Excel file');\n    }\n\n    // Get existing categories\n    const categories = await storage.getCategories();\n    \n    const importResults = {\n      total: rawData.length,\n      successful: 0,\n      failed: 0,\n      errors: [] as string[]\n    };\n\n    // Process each row\n    for (let i = 0; i < rawData.length; i++) {\n      try {\n        const row = rawData[i];\n        const mappedExpense = await mapExcelRowToExpense(row, categories);\n        \n        // Validate with schema\n        const validatedExpense = insertExpenseSchema.parse(mappedExpense);\n        \n        // Create expense\n        await storage.createExpense(validatedExpense);\n        importResults.successful++;\n        \n      } catch (error) {\n        console.error(`Failed to import row ${i + 1}:`, error);\n        importResults.failed++;\n        importResults.errors.push(`Row ${i + 1}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    return importResults;\n  } catch (error) {\n    console.error('Error importing expenses from Excel:', error);\n    throw error;\n  }\n}","size_bytes":5339},"server/authConfig.ts":{"content":"export interface AuthConfig {\n  auth: {\n    clientId: string;\n    authority: string;\n    clientSecret: string;\n  };\n  system: {\n    loggerOptions: {\n      loggerCallback: (level: any, message: string, containsPii: boolean) => void;\n      piiLoggingEnabled: boolean;\n      logLevel: number;\n    };\n  };\n}\n\nexport const msalConfig: AuthConfig = {\n  auth: {\n    clientId: process.env.AZURE_CLIENT_ID || \"\",\n    authority: `${process.env.AZURE_CLOUD_INSTANCE || \"https://login.microsoftonline.com/\"}${process.env.AZURE_TENANT_ID || \"\"}`,\n    clientSecret: process.env.AZURE_CLIENT_SECRET || \"\",\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback(level: any, message: string, containsPii: boolean) {\n        if (!containsPii) {\n          console.log(`[MSAL] ${message}`);\n        }\n      },\n      piiLoggingEnabled: false,\n      logLevel: 3,\n    },\n  },\n};\n\nexport const REDIRECT_URI = process.env.AZURE_REDIRECT_URI || \"https://ce024f68-a4f6-43ef-bf2b-5a8963f12ae5-00-ptzzz2z0tnld.riker.replit.dev/auth/redirect\";\nexport const POST_LOGOUT_REDIRECT_URI = process.env.AZURE_POST_LOGOUT_REDIRECT_URI || \"https://ce024f68-a4f6-43ef-bf2b-5a8963f12ae5-00-ptzzz2z0tnld.riker.replit.dev\";\nexport const GRAPH_ME_ENDPOINT = \"https://graph.microsoft.com/v1.0/me\";\nexport const SCOPES = [\"user.read\"];","size_bytes":1293},"server/authProvider.ts":{"content":"import { ConfidentialClientApplication, CryptoProvider, AuthenticationResult } from '@azure/msal-node';\nimport { Request, Response, NextFunction } from 'express';\nimport { msalConfig, REDIRECT_URI, POST_LOGOUT_REDIRECT_URI, SCOPES } from './authConfig';\nimport { storage } from './storage';\nimport { User } from '@shared/schema';\nimport axios from 'axios';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    accessToken?: string;\n    idToken?: string;\n    account?: any;\n    isAuthenticated?: boolean;\n    user?: User;\n  }\n}\n\nclass AuthProvider {\n  private msalInstance: ConfidentialClientApplication;\n  private cryptoProvider: CryptoProvider;\n\n  constructor() {\n    this.msalInstance = new ConfidentialClientApplication(msalConfig);\n    this.cryptoProvider = new CryptoProvider();\n  }\n\n  login(options: { successRedirect?: string } = {}) {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        const state = this.cryptoProvider.base64Encode(\n          JSON.stringify({\n            successRedirect: options.successRedirect || '/dashboard'\n          })\n        );\n\n        const authCodeUrlRequestParams = {\n          state: state,\n          scopes: SCOPES,\n          redirectUri: REDIRECT_URI\n        };\n\n        const authCodeUrl = await this.msalInstance.getAuthCodeUrl(authCodeUrlRequestParams);\n        res.redirect(authCodeUrl);\n      } catch (error) {\n        console.error('Auth login error:', error);\n        next(error);\n      }\n    };\n  }\n\n  async completeAuth(req: Request, res: Response, next: NextFunction) {\n    try {\n      if (!req.query.code || !req.query.state) {\n        return res.status(400).send('Missing code or state parameter');\n      }\n\n      const state = JSON.parse(this.cryptoProvider.base64Decode(req.query.state as string));\n\n      const authCodeRequest = {\n        code: req.query.code as string,\n        scopes: SCOPES,\n        redirectUri: REDIRECT_URI,\n        state: req.query.state as string\n      };\n\n      const response: AuthenticationResult = await this.msalInstance.acquireTokenByCode(authCodeRequest);\n      \n      // Get user info from Microsoft Graph\n      const userInfo = await axios.get('https://graph.microsoft.com/v1.0/me', {\n        headers: {\n          'Authorization': `Bearer ${response.accessToken}`\n        }\n      });\n\n      const azureUser = userInfo.data;\n      \n      // Only allow pre-approved users to sign in\n      let user = await storage.getUserByAzureObjectId(azureUser.id);\n      \n      if (!user) {\n        // Try to find user by email (for existing users without Azure Object ID)\n        const email = azureUser.mail || azureUser.userPrincipalName;\n        user = await storage.getUserByEmail(email);\n        \n        if (user) {\n          // Check if user is active\n          if (!user.isActive) {\n            return res.status(403).json({ \n              error: 'Your account is not active. Please contact the administrator.' \n            });\n          }\n          \n          // Update existing user with Azure Object ID\n          user = await storage.updateUser(user.id, {\n            azureObjectId: azureUser.id,\n            name: azureUser.displayName, // Update name from Azure\n          });\n        } else {\n          // User not found - not pre-approved\n          return res.status(403).json({ \n            error: 'Access denied. Your email is not authorized. Please contact the administrator to request access.' \n          });\n        }\n      } else {\n        // Check if user is active\n        if (!user.isActive) {\n          return res.status(403).json({ \n            error: 'Your account is not active. Please contact the administrator.' \n          });\n        }\n      }\n\n      // Ensure user is defined at this point\n      if (!user) {\n        return res.status(500).json({ error: 'Authentication failed' });\n      }\n\n      // Update last login\n      await storage.updateUserLastLogin(user.id);\n\n      // Set session data\n      req.session.accessToken = response.accessToken;\n      req.session.idToken = response.idToken;\n      req.session.account = response.account;\n      req.session.isAuthenticated = true;\n      req.session.user = user;\n\n      res.redirect(state.successRedirect);\n    } catch (error) {\n      console.error('Auth completion error:', error);\n      next(error);\n    }\n  }\n\n  logout() {\n    return (req: Request, res: Response) => {\n      const logoutUri = `${msalConfig.auth.authority}/oauth2/v2.0/logout?post_logout_redirect_uri=${POST_LOGOUT_REDIRECT_URI}`;\n      \n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destroy error:', err);\n        }\n        res.redirect(logoutUri);\n      });\n    };\n  }\n\n  requireAuth() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (req.session.isAuthenticated && req.session.user) {\n        return next();\n      } else {\n        return res.status(401).json({ error: 'Authentication required' });\n      }\n    };\n  }\n\n  requireAdmin() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (req.session.isAuthenticated && req.session.user?.role === 'admin') {\n        return next();\n      } else {\n        return res.status(403).json({ error: 'Admin access required' });\n      }\n    };\n  }\n\n  getUser() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (req.session.user) {\n        (req as any).user = req.session.user;\n      }\n      next();\n    };\n  }\n}\n\nexport const authProvider = new AuthProvider();","size_bytes":5507},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthState {\n  isAuthenticated: boolean;\n  user: User | null;\n  isLoading: boolean;\n  isAdmin: boolean;\n}\n\ninterface AuthContextType extends AuthState {\n  login: () => void;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useAuthState(): AuthContextType {\n  const [authState, setAuthState] = useState<AuthState>({\n    isAuthenticated: false,\n    user: null,\n    isLoading: true,\n    isAdmin: false\n  });\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('/auth/me', { \n        credentials: 'include',\n        method: 'GET'\n      });\n      \n      if (response.ok) {\n        const user = await response.json();\n        setAuthState({\n          isAuthenticated: true,\n          user,\n          isLoading: false,\n          isAdmin: user.role === 'admin'\n        });\n      } else {\n        setAuthState({\n          isAuthenticated: false,\n          user: null,\n          isLoading: false,\n          isAdmin: false\n        });\n      }\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        isLoading: false,\n        isAdmin: false\n      });\n    }\n  };\n\n  const login = () => {\n    window.location.href = '/auth/signin';\n  };\n\n  const logout = async () => {\n    try {\n      window.location.href = '/auth/signout';\n    } catch (error) {\n      console.error('Error during logout:', error);\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        isLoading: false,\n        isAdmin: false\n      });\n      window.location.href = '/';\n    }\n  };\n\n  const refreshUser = async () => {\n    await checkAuthStatus();\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  return {\n    ...authState,\n    login,\n    logout,\n    refreshUser\n  } as AuthContextType;\n}","size_bytes":2218},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { User } from \"@shared/schema\";\nimport { Users, Shield, UserCheck, UserX, RefreshCw, Plus, Edit, Trash2, ArrowLeft, Bell } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\n// User form schema\nconst userFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  role: z.enum([\"user\", \"admin\"]),\n  isActive: z.boolean().default(true),\n});\n\ntype UserFormData = z.infer<typeof userFormSchema>;\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const [confirmDialog, setConfirmDialog] = useState<{\n    isOpen: boolean;\n    userId: string;\n    action: 'activate' | 'deactivate' | 'delete';\n    userName: string;\n  }>({\n    isOpen: false,\n    userId: '',\n    action: 'activate',\n    userName: ''\n  });\n\n  const [userFormDialog, setUserFormDialog] = useState<{\n    isOpen: boolean;\n    mode: 'create' | 'edit';\n    user?: User;\n  }>({\n    isOpen: false,\n    mode: 'create',\n    user: undefined\n  });\n\n  // Form for creating/editing users\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      role: \"user\",\n      isActive: true,\n    },\n  });\n\n  // Fetch all users\n  const { data: users, isLoading, error } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const res = await fetch('/api/users', { credentials: 'include' });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json() as Promise<User[]>;\n    }\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (data: UserFormData) => {\n      return apiRequest('POST', '/api/users', {\n        ...data,\n        isActive: data.isActive ? 1 : 0\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"User created\",\n        description: \"User has been created successfully.\",\n      });\n      setUserFormDialog({ isOpen: false, mode: 'create' });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, data }: { userId: string; data: Partial<UserFormData> }) => {\n      return apiRequest('PUT', `/api/users/${userId}`, {\n        ...data,\n        isActive: data.isActive !== undefined ? (data.isActive ? 1 : 0) : undefined\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"User updated\",\n        description: \"User has been updated successfully.\",\n      });\n      setUserFormDialog({ isOpen: false, mode: 'create' });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Toggle user active status mutation\n  const toggleUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }) => {\n      return apiRequest('PATCH', `/api/users/${userId}/status`, { isActive: isActive ? 1 : 0 });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"User status updated\",\n        description: \"User access has been successfully updated.\",\n      });\n      setConfirmDialog({ isOpen: false, userId: '', action: 'activate', userName: '' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest('DELETE', `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"User deleted\",\n        description: \"User has been deleted successfully.\",\n      });\n      setConfirmDialog({ isOpen: false, userId: '', action: 'activate', userName: '' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Handler functions\n  const handleStatusToggle = (user: User, newStatus: boolean) => {\n    setConfirmDialog({\n      isOpen: true,\n      userId: user.id,\n      action: newStatus ? 'activate' : 'deactivate',\n      userName: user.name\n    });\n  };\n\n  const handleDeleteUser = (user: User) => {\n    setConfirmDialog({\n      isOpen: true,\n      userId: user.id,\n      action: 'delete',\n      userName: user.name\n    });\n  };\n\n  const handleEditUser = (user: User) => {\n    form.reset({\n      name: user.name,\n      email: user.email,\n      role: user.role as \"user\" | \"admin\",\n      isActive: Boolean(user.isActive),\n    });\n    setUserFormDialog({\n      isOpen: true,\n      mode: 'edit',\n      user: user\n    });\n  };\n\n  const handleCreateUser = () => {\n    form.reset({\n      name: \"\",\n      email: \"\",\n      role: \"user\",\n      isActive: true,\n    });\n    setUserFormDialog({\n      isOpen: true,\n      mode: 'create'\n    });\n  };\n\n  const confirmStatusChange = () => {\n    if (confirmDialog.action === 'delete') {\n      deleteUserMutation.mutate(confirmDialog.userId);\n    } else {\n      toggleUserStatusMutation.mutate({\n        userId: confirmDialog.userId,\n        isActive: confirmDialog.action === 'activate'\n      });\n    }\n  };\n\n  const onSubmitUser = (data: UserFormData) => {\n    if (userFormDialog.mode === 'create') {\n      createUserMutation.mutate(data);\n    } else if (userFormDialog.user) {\n      updateUserMutation.mutate({\n        userId: userFormDialog.user.id,\n        data: data\n      });\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 md:ml-0 p-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center text-red-600\">\n                <Shield className=\"h-12 w-12 mx-auto mb-4\" />\n                <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n                <p>You don't have permission to view user management.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 md:ml-0 p-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <RefreshCw className=\"h-12 w-12 mx-auto mb-4 animate-spin\" />\n                <p>Loading user management...</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 md:ml-0\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"md:ml-0 ml-16\">\n                <div className=\"flex items-center space-x-4\">\n                  <Link href=\"/\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back to Dashboard\n                    </Button>\n                  </Link>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">User Management</h2>\n                    <p className=\"text-muted-foreground\">Manage user access and permissions for the expense tracking system</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"secondary\" className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                {users?.length || 0} Total Users\n              </Badge>\n              <Button onClick={handleCreateUser} data-testid=\"button-add-user\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add User\n              </Button>\n            </div>\n          </div>\n        </header>\n        \n        {/* User Management Content */}\n        <main className=\"p-6 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                System Users\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!users || users.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No users found</h3>\n                  <p className=\"text-muted-foreground\">\n                    Click \"Add User\" to create the first user account.\n                  </p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users.map((user) => (\n                      <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-name-${user.id}`}>\n                          {user.name}\n                        </TableCell>\n                        <TableCell data-testid={`text-email-${user.id}`}>\n                          {user.email}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={user.role === 'admin' ? 'default' : 'secondary'}\n                            data-testid={`badge-role-${user.id}`}\n                          >\n                            {user.role}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={Boolean(user.isActive) ? 'default' : 'destructive'}\n                            data-testid={`badge-status-${user.id}`}\n                          >\n                            {Boolean(user.isActive) ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell data-testid={`text-joined-${user.id}`}>\n                          {new Date(user.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditUser(user)}\n                              data-testid={`button-edit-${user.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Switch\n                              checked={Boolean(user.isActive)}\n                              onCheckedChange={(checked) => handleStatusToggle(user, checked)}\n                              disabled={toggleUserStatusMutation.isPending}\n                              data-testid={`switch-status-${user.id}`}\n                            />\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteUser(user)}\n                              data-testid={`button-delete-${user.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 text-destructive\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* User Form Dialog */}\n      <Dialog open={userFormDialog.isOpen} onOpenChange={() => setUserFormDialog({ ...userFormDialog, isOpen: false })}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {userFormDialog.mode === 'create' ? (\n                <Plus className=\"h-5 w-5 text-primary\" />\n              ) : (\n                <Edit className=\"h-5 w-5 text-primary\" />\n              )}\n              {userFormDialog.mode === 'create' ? 'Add New User' : 'Edit User'}\n            </DialogTitle>\n            <DialogDescription>\n              {userFormDialog.mode === 'create' \n                ? \"Create a new user account for the expense tracking system.\"\n                : \"Update user information and permissions.\"\n              }\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitUser)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter user's full name\" {...field} data-testid=\"input-user-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"Enter user's email address\" {...field} data-testid=\"input-user-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"select-user-role\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select user role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Active Status</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Allow this user to access the application\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-user-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setUserFormDialog({ ...userFormDialog, isOpen: false })}\n                  data-testid=\"button-cancel-user-form\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createUserMutation.isPending || updateUserMutation.isPending}\n                  data-testid=\"button-save-user\"\n                >\n                  {(createUserMutation.isPending || updateUserMutation.isPending) && (\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                  )}\n                  {userFormDialog.mode === 'create' ? 'Create User' : 'Update User'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Confirmation Dialog */}\n      <Dialog open={confirmDialog.isOpen} onOpenChange={() => setConfirmDialog({ ...confirmDialog, isOpen: false })}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {confirmDialog.action === 'activate' && <UserCheck className=\"h-5 w-5 text-green-600\" />}\n              {confirmDialog.action === 'deactivate' && <UserX className=\"h-5 w-5 text-yellow-600\" />}\n              {confirmDialog.action === 'delete' && <Trash2 className=\"h-5 w-5 text-red-600\" />}\n              {confirmDialog.action === 'activate' && 'Activate User'}\n              {confirmDialog.action === 'deactivate' && 'Deactivate User'}\n              {confirmDialog.action === 'delete' && 'Delete User'}\n            </DialogTitle>\n            <DialogDescription>\n              {confirmDialog.action === 'activate' && \n                `Are you sure you want to activate ${confirmDialog.userName}? This user will regain access to the expense tracking system.`\n              }\n              {confirmDialog.action === 'deactivate' && \n                `Are you sure you want to deactivate ${confirmDialog.userName}? This user will lose access to the expense tracking system.`\n              }\n              {confirmDialog.action === 'delete' && \n                `Are you sure you want to permanently delete ${confirmDialog.userName}? This action cannot be undone.`\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })}\n              data-testid=\"button-cancel-action\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant={confirmDialog.action === 'delete' ? 'destructive' : confirmDialog.action === 'activate' ? 'default' : 'secondary'}\n              onClick={confirmStatusChange}\n              disabled={toggleUserStatusMutation.isPending || deleteUserMutation.isPending}\n              data-testid=\"button-confirm-action\"\n            >\n              {(toggleUserStatusMutation.isPending || deleteUserMutation.isPending) && (\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n              )}\n              {confirmDialog.action === 'activate' && 'Activate'}\n              {confirmDialog.action === 'deactivate' && 'Deactivate'}\n              {confirmDialog.action === 'delete' && 'Delete'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21633},"server/authRoutes.ts":{"content":"import express from 'express';\nimport { authProvider } from './authProvider';\n\nconst router = express.Router();\n\n// Login route - redirects to Microsoft 365 authentication\nrouter.get('/signin', authProvider.login({\n  successRedirect: '/dashboard'\n}));\n\n// OAuth redirect callback route\nrouter.get('/redirect', async (req, res, next) => {\n  await authProvider.completeAuth(req, res, next);\n});\n\n// Logout route\nrouter.get('/signout', authProvider.logout());\n\n// Current user info route\nrouter.get('/me', authProvider.requireAuth(), (req, res) => {\n  res.json(req.session.user);\n});\n\nexport default router;","size_bytes":604},"server/userRoutes.ts":{"content":"import express from 'express';\nimport { authProvider } from './authProvider';\nimport { storage } from './storage';\nimport { insertUserSchema, updateUserSchema } from '@shared/schema';\n\nconst router = express.Router();\n\n// Get all users (admin only)\nrouter.get('/', authProvider.requireAdmin(), async (req, res) => {\n  try {\n    const users = await storage.getUsers();\n    res.json(users);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({ error: 'Failed to fetch users' });\n  }\n});\n\n// Create new user (admin only)\nrouter.post('/', authProvider.requireAdmin(), async (req, res) => {\n  try {\n    const userData = insertUserSchema.omit({ id: true, createdAt: true, updatedAt: true, azureObjectId: true, lastLoginAt: true }).parse(req.body);\n    const user = await storage.createUser(userData);\n    res.status(201).json(user);\n  } catch (error) {\n    console.error('Error creating user:', error);\n    res.status(400).json({ error: 'Failed to create user' });\n  }\n});\n\n// Get user by ID (admin only)\nrouter.get('/:id', authProvider.requireAdmin(), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const user = await storage.getUserById(id);\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    res.status(500).json({ error: 'Failed to fetch user' });\n  }\n});\n\n// Update user role or status (admin only)\nrouter.put('/:id', authProvider.requireAdmin(), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Prevent admin from demoting themselves\n    if (id === req.session.user?.id && req.body.role === 'user') {\n      return res.status(400).json({ error: 'Cannot demote yourself from admin role' });\n    }\n    \n    const userData = updateUserSchema.partial().parse(req.body);\n    const user = await storage.updateUser(id, userData);\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    res.status(400).json({ error: 'Failed to update user' });\n  }\n});\n\n// Toggle user active status (admin only)\nrouter.patch('/:id/status', authProvider.requireAdmin(), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { isActive } = req.body;\n    \n    // Prevent admin from deactivating themselves\n    if (id === req.session.user?.id && !isActive) {\n      return res.status(400).json({ error: 'Cannot deactivate your own account' });\n    }\n    \n    const user = await storage.updateUser(id, { isActive });\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Error updating user status:', error);\n    res.status(500).json({ error: 'Failed to update user status' });\n  }\n});\n\n// Delete user (admin only)\nrouter.delete('/:id', authProvider.requireAdmin(), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Prevent admin from deleting themselves\n    if (id === req.session.user?.id) {\n      return res.status(400).json({ error: 'Cannot delete your own account' });\n    }\n    \n    const success = await storage.deleteUser(id);\n    \n    if (!success) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.status(204).send();\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    res.status(500).json({ error: 'Failed to delete user' });\n  }\n});\n\nexport default router;","size_bytes":3599},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuthState } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, Loader2, LogIn } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport fdesLogo from \"@assets/image_1758110732910.png\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requireAdmin?: boolean;\n}\n\nexport function ProtectedRoute({ children, requireAdmin = false }: ProtectedRouteProps) {\n  const { isAuthenticated, isAdmin, isLoading, login } = useAuthState();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Loader2 className=\"h-12 w-12 mx-auto mb-4 animate-spin text-primary\" />\n              <p className=\"text-muted-foreground\">Checking authentication...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show login prompt if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 p-6\">\n        <Card className=\"max-w-md w-full shadow-lg\">\n          <CardContent className=\"pt-8 pb-8 px-8\">\n            <div className=\"text-center space-y-4\">\n              {/* FDES Logo */}\n              <div className=\"flex items-center justify-center\">\n                <img \n                  src={fdesLogo} \n                  alt=\"FDES Logo\" \n                  className=\"h-24 w-auto object-contain\"\n                />\n              </div>\n              \n              {/* Title and Subtitle */}\n              <div className=\"space-y-1\">\n                <h2 className=\"text-3xl font-semibold text-gray-800\">Expense Tracker</h2>\n                <p className=\"text-lg text-gray-600\">Sign in to your account</p>\n              </div>\n              \n              {/* Microsoft Sign In Button */}\n              <div className=\"pt-1\">\n                <Button \n                  onClick={login} \n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-4 px-6 text-lg font-medium rounded-lg flex items-center justify-center space-x-3\" \n                  data-testid=\"button-login-required\"\n                >\n                  <div className=\"w-5 h-5 bg-white rounded-sm flex items-center justify-center\">\n                    <div className=\"grid grid-cols-2 gap-px w-3 h-3\">\n                      <div className=\"bg-red-500 w-1.5 h-1.5\"></div>\n                      <div className=\"bg-green-500 w-1.5 h-1.5\"></div>\n                      <div className=\"bg-blue-500 w-1.5 h-1.5\"></div>\n                      <div className=\"bg-yellow-500 w-1.5 h-1.5\"></div>\n                    </div>\n                  </div>\n                  <span>Sign in with Microsoft Account</span>\n                </Button>\n              </div>\n              \n              {/* Version */}\n              <div className=\"pt-2\">\n                <p className=\"text-gray-500 text-sm font-medium\">V1.0 SEPT 2025</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show access denied if admin required but user is not admin\n  if (requireAdmin && !isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-6\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <Shield className=\"h-12 w-12 mx-auto text-destructive\" />\n              <div>\n                <h2 className=\"text-xl font-semibold\">Access Denied</h2>\n                <p className=\"text-muted-foreground mt-2\">\n                  You don't have permission to access this page. Administrator privileges are required.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // User is authenticated and has required permissions\n  return <>{children}</>;\n}","size_bytes":4063}},"version":1}